(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{112:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return o})),a.d(t,"default",(function(){return b}));var n=a(2),r=a(6),i=(a(0),a(133)),l={id:"tutorial",title:"O b\xe1sico",sidebar_label:"O b\xe1sico"},c={id:"tutorial",title:"O b\xe1sico",description:"Content extracted from HackerRank for translation.",source:"@site/docs/tutorial.md",permalink:"/docs/tutorial",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/tutorial.md",sidebar_label:"O b\xe1sico"},o=[{value:"Lexical Structure",id:"lexical-structure",children:[]},{value:"Character Set",id:"character-set",children:[]},{value:"Comments",id:"comments",children:[]},{value:"Literals",id:"literals",children:[]},{value:"Identifiers",id:"identifiers",children:[]},{value:"Optional Semicolon",id:"optional-semicolon",children:[]},{value:"Number Data Type",id:"number-data-type",children:[{value:"Maximum Value for a Number",id:"maximum-value-for-a-number",children:[]},{value:"Minimum Value for a Number",id:"minimum-value-for-a-number",children:[]},{value:"Symbolic Numbers",id:"symbolic-numbers",children:[]},{value:"The <em>isSafeInteger</em> Method",id:"the-issafeinteger-method",children:[]},{value:"Maximum Safe Integer",id:"maximum-safe-integer",children:[]},{value:"Minimum Safe Integer",id:"minimum-safe-integer",children:[]}]},{value:"String Data Type",id:"string-data-type",children:[]},{value:"Boolean Data Type",id:"boolean-data-type",children:[]},{value:"Symbol Data Type",id:"symbol-data-type",children:[]},{value:"Null Data Type",id:"null-data-type",children:[]},{value:"Undefined Data Type",id:"undefined-data-type",children:[]},{value:"The <em>typeof</em> Operator",id:"the-typeof-operator",children:[]},{value:"Dynamic Typing",id:"dynamic-typing",children:[]},{value:"Naming",id:"naming",children:[]},{value:"Declaration and Initialization",id:"declaration-and-initialization",children:[{value:"Coercion",id:"coercion",children:[]}]},{value:"Declaration Keywords",id:"declaration-keywords",children:[]},{value:"<code>var</code>",id:"var",children:[{value:"Solution",id:"solution",children:[]}]},{value:"<code>let</code>",id:"let",children:[{value:"Solution",id:"solution-1",children:[]}]},{value:"<code>const</code>",id:"const",children:[]},{value:"Operator Types",id:"operator-types",children:[{value:"Unary",id:"unary",children:[]},{value:"Binary",id:"binary",children:[]},{value:"Ternary",id:"ternary",children:[]}]},{value:"Arithmetic Operators",id:"arithmetic-operators",children:[{value:"1. Addition (<code>+</code>)",id:"1-addition-",children:[]},{value:"2. Subtraction (<code>-</code>)",id:"2-subtraction--",children:[]},{value:"3. Multiplication (<code>*</code>)",id:"3-multiplication-",children:[]},{value:"4. Division (<code>/</code>)",id:"4-division-",children:[]},{value:"5. Remainder (<code>%</code>)",id:"5-remainder-",children:[]},{value:"6. Exponentiation (<code>**</code>)",id:"6-exponentiation-",children:[]},{value:"7. Unary Negation (<code>-</code>)",id:"7-unary-negation--",children:[]},{value:"8. Unary Plus (<code>+</code>)",id:"8-unary-plus-",children:[]},{value:"9. Increment (<code>++</code>)",id:"9-increment-",children:[]},{value:"10. Decrement (<code>--</code>)",id:"10-decrement---",children:[]}]},{value:"The Function Expression",id:"the-function-expression",children:[{value:"Unnamed Function Expression",id:"unnamed-function-expression",children:[]}]},{value:"Recursion",id:"recursion",children:[]},{value:"Example (Java, reescrever em js)",id:"example-java-reescrever-em-js",children:[]},{value:"Equality (<code>==</code>)",id:"equality-",children:[]},{value:"Inequality (<code>!=</code>)",id:"inequality-",children:[]},{value:"Example: Comparing Objects",id:"example-comparing-objects",children:[]},{value:"Identity or Strict Equality (<code>===</code>)",id:"identity-or-strict-equality-",children:[]},{value:"Non-Identity or Strict Inequality (<code>!==</code>)",id:"non-identity-or-strict-inequality-",children:[]},{value:"Greater Than Operator (<code>&gt;</code>)",id:"greater-than-operator-",children:[]},{value:"Greater Than or Equal Operator (<code>&gt;=</code>)",id:"greater-than-or-equal-operator-",children:[]},{value:"Less Than Operator (<code>&lt;</code>)",id:"less-than-operator-",children:[]},{value:"Less Than or Equal Operator (<code>&lt;=</code>)",id:"less-than-or-equal-operator-",children:[]},{value:"Example: Relational Operators",id:"example-relational-operators",children:[]},{value:"Logical AND (<code>&amp;&amp;</code>)",id:"logical-and-",children:[]},{value:"Logical OR (<code>||</code>)",id:"logical-or-",children:[]},{value:"Logical NOT (<code>!</code>)",id:"logical-not-",children:[]},{value:"Short-Circuit Evaluation",id:"short-circuit-evaluation",children:[]},{value:"If-Else Statements",id:"if-else-statements",children:[]},{value:"Falsy Values",id:"falsy-values",children:[]},{value:"Conditional (Ternary) Operator",id:"conditional-ternary-operator",children:[]},{value:"The <code>default</code> Clause",id:"the-default-clause",children:[]},{value:"The <code>break;</code> Statement",id:"the-break-statement",children:[]},{value:"Multi-Criteria Case",id:"multi-criteria-case",children:[]},{value:"String Basics",id:"string-basics",children:[]},{value:"JavaScript Strings",id:"javascript-strings",children:[]},{value:"String Constructor",id:"string-constructor",children:[]},{value:"<code>String.charAt()</code>",id:"stringcharat",children:[]},{value:"<code>String.concat()</code>",id:"stringconcat",children:[]},{value:"<code>String.includes()</code>",id:"stringincludes",children:[]},{value:"<code>String.endsWith()</code>",id:"stringendswith",children:[]},{value:"<code>String.indexOf()</code>",id:"stringindexof",children:[]},{value:"<code>String.lastIndexOf()</code>",id:"stringlastindexof",children:[]},{value:"<code>String.match()</code>",id:"stringmatch",children:[]},{value:"<code>String.normalize()</code>",id:"stringnormalize",children:[]},{value:"<code>String.repeat()</code>",id:"stringrepeat",children:[]},{value:"<code>String.replace()</code>",id:"stringreplace",children:[]},{value:"<code>String.search()</code>",id:"stringsearch",children:[]},{value:"<code>String.slice()</code>",id:"stringslice",children:[]},{value:"<code>String.split()</code>",id:"stringsplit",children:[]},{value:"<code>String.startsWith()</code>",id:"stringstartswith",children:[]},{value:"<code>String.substr()</code>",id:"stringsubstr",children:[]},{value:"<code>String.substring()</code>",id:"stringsubstring",children:[]},{value:"<code>String.toLowerCase()</code>",id:"stringtolowercase",children:[]},{value:"<code>String.toUpperCase()</code>",id:"stringtouppercase",children:[]},{value:"<code>String.trim()</code>",id:"stringtrim",children:[]},{value:"<code>String.trimLeft()</code>",id:"stringtrimleft",children:[]},{value:"<code>String.trimRight()</code>",id:"stringtrimright",children:[]},{value:"<em>for</em>",id:"for",children:[{value:"Basic Syntax",id:"basic-syntax",children:[]},{value:"Components",id:"components",children:[]}]},{value:"<em>while</em>",id:"while",children:[{value:"Basic Syntax",id:"basic-syntax-1",children:[]}]},{value:"<em>do-while</em>",id:"do-while",children:[{value:"Basic Syntax",id:"basic-syntax-2",children:[]}]},{value:"<em>for-in</em>",id:"for-in",children:[{value:"Basic Syntax",id:"basic-syntax-3",children:[]}]},{value:"<em>for-of</em>",id:"for-of",children:[{value:"Basic Syntax",id:"basic-syntax-4",children:[]},{value:"Example (Java)",id:"example-java",children:[]}]},{value:"1. Create an Array",id:"1-create-an-array",children:[]},{value:"2. Access (Index Into) an Array Item",id:"2-access-index-into-an-array-item",children:[]},{value:"3. Loop Over an Array",id:"3-loop-over-an-array",children:[]},{value:"4. Append to the End of an Array",id:"4-append-to-the-end-of-an-array",children:[]},{value:"5. Remove From the end of an Array",id:"5-remove-from-the-end-of-an-array",children:[]},{value:"6. Remove From the Front of an Array",id:"6-remove-from-the-front-of-an-array",children:[]},{value:"7. Add to the Front of an Array",id:"7-add-to-the-front-of-an-array",children:[]},{value:"8. Find the Index of an Item in the Array",id:"8-find-the-index-of-an-item-in-the-array",children:[]},{value:"9. Remove an Item by Index Position",id:"9-remove-an-item-by-index-position",children:[]},{value:"10. Copy an Array",id:"10-copy-an-array",children:[]},{value:"11. Sort an Array",id:"11-sort-an-array",children:[]},{value:"12. Iterate Over an Array",id:"12-iterate-over-an-array",children:[]},{value:"JavaScript Errors",id:"javascript-errors",children:[{value:"1. Syntax Error (Parsing Error)",id:"1-syntax-error-parsing-error",children:[]},{value:"2. Runtime Error (Exception)",id:"2-runtime-error-exception",children:[]},{value:"3. Logical Error",id:"3-logical-error",children:[]},{value:"Solution",id:"solution-2",children:[]}]},{value:"Try, Catch, and Finally",id:"try-catch-and-finally",children:[]},{value:"Throw",id:"throw",children:[{value:"1. <code>throw value</code>",id:"1-throw-value",children:[]},{value:"2. <code>throw new Error(customError)</code>",id:"2-throw-new-errorcustomerror",children:[]}]},{value:"Object Basics",id:"object-basics",children:[]},{value:"Creating Objects",id:"creating-objects",children:[{value:"1. Using Object Initializers",id:"1-using-object-initializers",children:[]},{value:"2. Using a Constructor Function",id:"2-using-a-constructor-function",children:[]}]},{value:"Basic <em>for</em> Loop",id:"basic-for-loop",children:[]},{value:"The <em>for...in</em> Statement",id:"the-forin-statement",children:[]},{value:"The <em>forEach</em> Method",id:"the-foreach-method",children:[]},{value:"Functional Classes",id:"functional-classes",children:[{value:"Using Functions",id:"using-functions",children:[]},{value:"The Prototype Property",id:"the-prototype-property",children:[]},{value:"Using Object Literals",id:"using-object-literals",children:[]},{value:"Singleton Class Using a Function",id:"singleton-class-using-a-function",children:[]}]},{value:"Classes",id:"classes-1",children:[{value:"Class Declarations",id:"class-declarations",children:[]},{value:"Class Expressions",id:"class-expressions",children:[]}]},{value:"The Constructor Method",id:"the-constructor-method",children:[]},{value:"Prototype Methods",id:"prototype-methods",children:[]},{value:"Static Methods",id:"static-methods",children:[]},{value:"Inheritance",id:"inheritance",children:[]},{value:"Subclassing with the <code>extends</code> Keyword",id:"subclassing-with-the-extends-keyword",children:[]},{value:"Superclass Calls Using the <code>super</code> Keyword",id:"superclass-calls-using-the-super-keyword",children:[]},{value:"Extending an Object",id:"extending-an-object",children:[]},{value:"Multi-line Strings",id:"multi-line-strings",children:[]},{value:"Expression Interpolation",id:"expression-interpolation",children:[]},{value:"Tagged Template Literals",id:"tagged-template-literals",children:[]},{value:"Using Arrow Functions",id:"using-arrow-functions",children:[]},{value:"Binary Number Basics",id:"binary-number-basics",children:[]},{value:"Base-10 (Decimal) to Base-2 (Binary) Conversions",id:"base-10-decimal-to-base-2-binary-conversions",children:[]},{value:"Base- (Binary) to Base- (Decimal) Conversions",id:"base--binary-to-base--decimal-conversions",children:[]},{value:"Representing Negative Base- Numbers in Base-",id:"representing-negative-base--numbers-in-base-",children:[]},{value:"Bitwise Operation Conventions",id:"bitwise-operation-conventions",children:[]},{value:"Bitwise AND (<code>&amp;</code>)",id:"bitwise-and-",children:[]},{value:"Bitwise OR (<code>|</code>)",id:"bitwise-or-",children:[]},{value:"Bitwise XOR (<code>^</code>)",id:"bitwise-xor-",children:[]},{value:"Bitwise NOT (<code>~</code>)",id:"bitwise-not-",children:[]},{value:"Additional Examples",id:"additional-examples",children:[]},{value:"Creating Date Instance",id:"creating-date-instance",children:[{value:"1. Using <code>new Date()</code>",id:"1-using-new-date",children:[]},{value:"2. Using <code>new Date(value)</code>",id:"2-using-new-datevalue",children:[]},{value:"3. Using <code>new Date(dateString)</code>",id:"3-using-new-datedatestring",children:[]},{value:"4. Using new Date(year, month, day, hour, minutes, seconds, milliseconds)",id:"4-using-new-dateyear-month-day-hour-minutes-seconds-milliseconds",children:[]}]},{value:"Date <code>get</code> Methods",id:"date-get-methods",children:[{value:"1. Date.getTime()",id:"1-dategettime",children:[]},{value:"2. Date.getFullYear()",id:"2-dategetfullyear",children:[]},{value:"3. Date.getMonth()",id:"3-dategetmonth",children:[]},{value:"4. Date.getDate()",id:"4-dategetdate",children:[]},{value:"5. Date.getDay()",id:"5-dategetday",children:[]},{value:"6. Date.getHours()",id:"6-dategethours",children:[]},{value:"7. Date.getMinutes()",id:"7-dategetminutes",children:[]},{value:"8. Date.getSeconds()",id:"8-dategetseconds",children:[]},{value:"9. Date.getMilliseconds()",id:"9-dategetmilliseconds",children:[]}]},{value:"Creating a Regular Expression",id:"creating-a-regular-expression",children:[]},{value:"Regular Expression Patterns",id:"regular-expression-patterns",children:[{value:"Regular Expression Literal",id:"regular-expression-literal",children:[]},{value:"<em>RegExp</em> Objects",id:"regexp-objects",children:[]}]},{value:"Flags",id:"flags",children:[]},{value:"Special Characters in Regular Expressions",id:"special-characters-in-regular-expressions",children:[]},{value:"Character Classes",id:"character-classes",children:[]},{value:"Character Sets",id:"character-sets",children:[{value:"Alteration",id:"alteration",children:[]},{value:"Boundaries",id:"boundaries",children:[]},{value:"Grouping and back references",id:"grouping-and-back-references",children:[]},{value:"Quantifiers",id:"quantifiers",children:[]},{value:"Assertions",id:"assertions",children:[]},{value:"Working with Regular Expressions",id:"working-with-regular-expressions",children:[]},{value:"The <code>test</code> Method",id:"the-test-method",children:[]},{value:"The <code>exec</code> Method",id:"the-exec-method",children:[]}]},{value:"Match",id:"match",children:[]},{value:"Search",id:"search",children:[]},{value:"Split",id:"split",children:[{value:"Replace",id:"replace",children:[]}]}],s={rightToc:o};function b(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Content extracted from ",Object(i.b)("a",Object(n.a)({parentName:"em"},{href:"https://www.hackerrank.com/"}),"HackerRank")," for translation.")),Object(i.b)("h1",{id:"basic"},"Basic"),Object(i.b)("h2",{id:"lexical-structure"},"Lexical Structure"),Object(i.b)("p",null,"The lexical structure of a programming language is the set of elementary rules that tells you ",Object(i.b)("em",{parentName:"p"},"how")," to write programs in that language. It's essentially the lowest-level syntax of a language and specifies such things as what variable names look like, the delimiter characters for comments, and how one program statement is separated from the next."),Object(i.b)("h2",{id:"character-set"},"Character Set"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"JavaScript programs are written using the ",Object(i.b)("em",{parentName:"li"},"Unicode")," character set. Unicode is a superset of ",Object(i.b)("em",{parentName:"li"},"ASCII")," and ",Object(i.b)("em",{parentName:"li"},"Latin-1"),".")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"JavaScript is a ",Object(i.b)("inlineCode",{parentName:"li"},"caseSensitive")," language."),Object(i.b)("li",{parentName:"ul"},"JavaScript ignores ",Object(i.b)("inlineCode",{parentName:"li"},"spaces")," that appear between tokens in programs. For the most part, JavaScript also ignores ",Object(i.b)("inlineCode",{parentName:"li"},"line breaks"),".")),Object(i.b)("h2",{id:"comments"},"Comments"),Object(i.b)("p",null,"JavaScript supports two styles of comments, as demonstrated below."),Object(i.b)("h4",{id:"inline-comments"},"Inline Comments"),Object(i.b)("p",null,"Any text between a ",Object(i.b)("inlineCode",{parentName:"p"},"//")," and the end of a line is ignored by JavaScript and treated as a comment:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'console.log("This is an instruction that won\'t be ignored.");\n// This is an inline comment and will be ignored\n')),Object(i.b)("h4",{id:"block-comments"},"Block Comments"),Object(i.b)("p",null,"Any text between ",Object(i.b)("inlineCode",{parentName:"p"},"/*")," and ",Object(i.b)("inlineCode",{parentName:"p"},"*/")," is also treated as a comment:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'console.log("This is an instruction that won\'t be ignored.");\n/*\n * This is a block comment and will be ignored\n */\n \nconsole.log("This is an instruction that won\'t be ignored.");\n\n/*\n * This is part of our block comment and will be ignored\n * This is part of the same block comment and will be ignored\n */\n')),Object(i.b)("h2",{id:"literals"},"Literals"),Object(i.b)("p",null,"A literal is a data value that appears directly in a program. For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// The integer number twelve:\n12 \n\n// The floating-point number one-point-two:\n1.2 \n\n// A string of text:\n\"Hello, World.\" \n\n// Another string:\n'Hi!' \n\n// A boolean value:\ntrue \n\n// The absence of an object:\nnull \n")),Object(i.b)("p",null,"More complex expressions can serve as array and object literals."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// An object initializer:\n{x: 1, y: 2} \n\n// An array initializer:\n[1, 2, 3, 4, 5] \n")),Object(i.b)("h2",{id:"identifiers"},"Identifiers"),Object(i.b)("p",null,"An identifier is simply a name that you can specify and use as a means of referring back to a specific value or other piece of code. In JavaScript, identifiers are used to name variables and functions, as well as to provide labels for certain code loops."),Object(i.b)("p",null,"A JavaScript identifier must begin with a letter, an underscore (",Object(i.b)("inlineCode",{parentName:"p"},"_"),"), or a dollar sign (",Object(i.b)("inlineCode",{parentName:"p"},"$"),"). Subsequent characters can be letters, underscores, dollar signs, or ",Object(i.b)("em",{parentName:"p"},"digits")," (i.e., the numbers ",Object(i.b)("inlineCode",{parentName:"p"},"0")," through ",Object(i.b)("inlineCode",{parentName:"p"},"9")," ). Like many other languages, JavaScript doesn't allow digits as the first character of an identifier because it makes them more easily distinguishable from numbers."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Some valid identifiers are:\nx\nvariable_name\nsum13\n_variable\n$variable\n")),Object(i.b)("p",null,"A number of identifiers are ",Object(i.b)("em",{parentName:"p"},"reserved words")," or ",Object(i.b)("em",{parentName:"p"},"keywords"),", meaning they are part of a set of predefined words that have special meaning in the language itself. You cannot use these words as identifiers in your programs. For example, ",Object(i.b)("inlineCode",{parentName:"p"},"for")," and ",Object(i.b)("inlineCode",{parentName:"p"},"function")," are reserved words in JavaScript. In addition, there are a number of predefined global variables and functions; it's important to avoid using these predefined names for your own variables and functions."),Object(i.b)("h2",{id:"optional-semicolon"},"Optional Semicolon"),Object(i.b)("p",null,"Like many programming languages, JavaScript uses the semicolon (",Object(i.b)("inlineCode",{parentName:"p"},";"),") to separate statements from each other. This is important as it makes the meaning of your code clear; without a separator, the end of one statement might appear to be the beginning of the next (and vice versa). In JavaScript, you can usually ",Object(i.b)("inlineCode",{parentName:"p"},"omit the semicolon")," between two statements as long as those statements are written on separate lines."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"http://cangaceirojavascript.com.br/javascript-ponto-virgula-polemica-atravessa-tempo/"),"-"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Por fim, conclui-se que usar ou n\xe3o semicolon n\xe3o \xe9 uma decis\xe3o puramente do desenvolvedor, mas da comunidade do framework na qual ele participa. \xc9 o respaldo da comunidade que dir\xe1 se ele esta certo ou errado.")),Object(i.b)("h1",{id:"data-types"},"Data Types"),Object(i.b)("p",null,"The latest ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"http://www.ecma-international.org/ecma-262/7.0/index.html"}),"ECMAScript")," standard defines seven data types:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A primitive value or data type is data that is not an object and has no methods. All primitives are immutable, meaning they cannot be changed. There are six primitive types:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"Number")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"String")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"Boolean")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"Symbol")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"Null")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"Undefined")))),Object(i.b)("li",{parentName:"ul"},"The seventh data type is ",Object(i.b)("em",{parentName:"li"},"Object"))),Object(i.b)("h2",{id:"number-data-type"},"Number Data Type"),Object(i.b)("p",null,"According to the ",Object(i.b)("inlineCode",{parentName:"p"},"ECMAScript")," standard, all numbers are ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Double-precision_floating-point_format"}),"double-precision 64-bit binary format IEEE 754-2008"),", meaning there is no specific type for integers."),Object(i.b)("h3",{id:"maximum-value-for-a-number"},"Maximum Value for a Number"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"MAX_VALUE")," property has a value of approximately  $1.7976931348623157x10^{108}$ Values larger than ",Object(i.b)("inlineCode",{parentName:"p"},"Number.MAX_VALUE")," are represented as ",Object(i.b)("inlineCode",{parentName:"p"},"Infinity"),"."),Object(i.b)("h3",{id:"minimum-value-for-a-number"},"Minimum Value for a Number"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"MIN_VALUE")," property is the smallest positive value of the ",Object(i.b)("em",{parentName:"p"},"Number")," type closest to $0$ , not the most negative number, that JavaScript can represent. ",Object(i.b)("inlineCode",{parentName:"p"},"MIN_VALUE")," has a value of approximately $5x10^{-324}$. Values smaller than ",Object(i.b)("inlineCode",{parentName:"p"},"Number.MIN_VALUE"),' ("underflow values") are converted to .'),Object(i.b)("h3",{id:"symbolic-numbers"},"Symbolic Numbers"),Object(i.b)("p",null,"There are three symbolic number values:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Infinity"),": This is any number divided by $0$, or an attempt to multiply ",Object(i.b)("inlineCode",{parentName:"li"},"Number.MAX_VALUE")," by an integer $>1$."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"-Infinity"),": This is any number divided by  $-0$,  or an attempt to multiply ",Object(i.b)("inlineCode",{parentName:"li"},"Number.MAX_VALUE")," by an integer  $< -1$."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"NaN"),': This stands for "Not-a-Number" and denotes an unrepresentable value (i.e., $\\sqrt{-1}$).')),Object(i.b)("h3",{id:"the-issafeinteger-method"},"The ",Object(i.b)("em",{parentName:"h3"},"isSafeInteger")," Method"),Object(i.b)("p",null,"A ",Object(i.b)("em",{parentName:"p"},"safe integer")," is an integer that:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Can be exactly represented as an IEEE-754 double precision number, and"),Object(i.b)("li",{parentName:"ul"},"Whose IEEE-754 representation cannot be the result of rounding any other integer to fit the IEEE-754 representation.")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"Number.isSafeInteger()")," method determines whether the provided value is a number that is a safe integer."),Object(i.b)("h3",{id:"maximum-safe-integer"},"Maximum Safe Integer"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"Number.MAX_SAFE_INTEGER")," constant has a value of $9007199254740991$, or $2^{53}-1$."),Object(i.b)("h3",{id:"minimum-safe-integer"},"Minimum Safe Integer"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"Number.MIN_SAFE_INTEGER")," constant has a value of $-9007199254740991$, or $-2^{53}+1$."),Object(i.b)("h2",{id:"string-data-type"},"String Data Type"),Object(i.b)("p",null,"A string value is a chain of zero or more Unicode characters (i.e., letters, digits, and punctuation marks) that we use to represent text. We include string literals in our scripts by enclosing them in single (",Object(i.b)("inlineCode",{parentName:"p"},"'"),") or double (",Object(i.b)("inlineCode",{parentName:"p"},'"'),") quotation marks. Double quotation marks can be contained in strings surrounded by single quotation marks (e.g., ",Object(i.b)("inlineCode",{parentName:"p"},"'\"'")," evaluates to ",Object(i.b)("inlineCode",{parentName:"p"},'"'),"), and single quotation marks can be contained in strings surrounded by double quotation marks (e.g., ",Object(i.b)("inlineCode",{parentName:"p"},'"\'"')," evaluates to ",Object(i.b)("inlineCode",{parentName:"p"},"'"),")."),Object(i.b)("p",null,'Notice that JavaScript does not have a type to represent a single character. To represent a single character in JavaScript, you create a string that consists of only one character. A string that contains zero characters ("") is an empty (zero-length) string.'),Object(i.b)("p",null,"Unlike in languages like C, JavaScript strings are immutable. This means that once a string is created, it is not possible to modify it. However, it is still possible to create another string based on an operation on the original string. For example:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A substring of the original by picking individual letters or using ",Object(i.b)("inlineCode",{parentName:"li"},"String.substr()"),"."),Object(i.b)("li",{parentName:"ul"},"A concatenation of two strings using the concatenation operator (",Object(i.b)("inlineCode",{parentName:"li"},"+"),") or ",Object(i.b)("inlineCode",{parentName:"li"},"String.concat()"),". The following are examples of strings:")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'// Run the code below to learn more about the String type.\nconst firstString = "Hello, There.";\nconst secondString = "How\'re you?";\nconst thirdString = "c";\nconst fourthString = \'"Wow!!!", she shouted.\';\n\nconsole.log(firstString);\nconsole.log(secondString);\nconsole.log(thirdString);\nconsole.log(fourthString);\n')),Object(i.b)("h2",{id:"boolean-data-type"},"Boolean Data Type"),Object(i.b)("p",null,"A boolean represents a logical entity and can have one of two literal values: ",Object(i.b)("inlineCode",{parentName:"p"},"true"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"false"),"."),Object(i.b)("h2",{id:"symbol-data-type"},"Symbol Data Type"),Object(i.b)("p",null,"Symbols are new to JavaScript in ECMAScript Edition 6. A Symbol is a unique and immutable primitive value and may be used as the key of an Object property."),Object(i.b)("h2",{id:"null-data-type"},"Null Data Type"),Object(i.b)("p",null,"The null data type is an internal type that has only one value: ",Object(i.b)("inlineCode",{parentName:"p"},"null"),". This is a primitive value that represents the absence of any object value. A variable that contains null contains no valid number, string, boolean, array, or object. You can erase the contents of a variable (without deleting the variable) by assigning it the null value."),Object(i.b)("h2",{id:"undefined-data-type"},"Undefined Data Type"),Object(i.b)("p",null,"The undefined value is returned when you use an object property that does not exist, or a variable that has been declared, but has never had a value assigned to it."),Object(i.b)("h2",{id:"the-typeof-operator"},"The ",Object(i.b)("em",{parentName:"h2"},"typeof")," Operator"),Object(i.b)("p",null,"We can use the ",Object(i.b)("inlineCode",{parentName:"p"},"typeof")," operator to determine the type associated with a variable's current value:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'// Run the code bellow to learn more about typeof\n\n// Number Data Type:\nconst firstVar = 1.5e5; \n\n// String Data Type:\nconst secondVar = \'Hello\'; \n\n// Boolean Data Type:\nconst thirdVar = true; \n\n// Symbol Data Type:\nconst fourthVar = Symbol("some Symbol variable"); \n\n// Null Object:\nconst fifthVar = null; \n\n// Undefined Data Type:\nconst sixthVar; \n\n// Object:\nconst seventhVar = {a: 1, b: 2}; \n\n// NaN (It is a Number):\nconst eighthVar = Math.sqrt(-1); \n\nconsole.log(firstVar + " is a " + typeof firstVar);\nconsole.log(secondVar + " is a " + typeof secondVar);\nconsole.log(thirdVar + " is a " + typeof thirdVar);\nconsole.log(fourthVar.toString() + " is a " + typeof fourthVar);\nconsole.log(fifthVar + " is an " + typeof fifthVar);\nconsole.log(sixthVar + " is an " + typeof sixthVar);\nconsole.log(seventhVar + " is an " + typeof seventhVar);\nconsole.log(eighthVar + " is a " + typeof eighthVar);\n')),Object(i.b)("h1",{id:"variables"},"Variables"),Object(i.b)("h2",{id:"dynamic-typing"},"Dynamic Typing"),Object(i.b)("p",null,"JavaScript is a loosely typed or ",Object(i.b)("em",{parentName:"p"},"dynamic")," language, meaning you don't need to declare a variable's type ahead of time and the language automatically determines a variable's type while the program is being processed. That also means that you can reassign a single variable to reference different types. For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'// Run the code below to learn more about dynamic typing.\n\nfunction print() { \n    console.log(\n        "someVariable(" + someVariable \n        + ") is a " + typeof someVariable\n    );\n    // Note: \'typeof\' is explained later in this tutorial.\n}\n\n// Declare someVariable and initialize it to the number \'5\':\nconst someVariable = 5; \nprint(someVariable);\n\n// Assign the string "Hello" to someVariable:\nconst someVariable = "Hello"; \nprint(someVariable);\n\n// Assign the boolean value \'true\' to someVariable:\nconst someVariable = true; \nprint(someVariable);\n')),Object(i.b)("h2",{id:"naming"},"Naming"),Object(i.b)("p",null,"JavaScript is a case-sensitive language, meaning that a variable name such as ",Object(i.b)("inlineCode",{parentName:"p"},"myVariable")," is different from the variable name ",Object(i.b)("inlineCode",{parentName:"p"},"myvariable"),". Variable names can be of any length, and the rules for creating legal variable names are as follows:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The first character must be either an ASCII letter (uppercase or lowercase) or an underscore (",Object(i.b)("inlineCode",{parentName:"li"},"_"),"). Note that a number ",Object(i.b)("em",{parentName:"li"},"cannot")," be used as the first character."),Object(i.b)("li",{parentName:"ul"},"Subsequent characters can be ASCII letters, underscores, or digits (e.g., the numbers $0$ through $9$ )."),Object(i.b)("li",{parentName:"ul"},"The variable name must not be a ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords"}),"reserved word"),".")),Object(i.b)("p",null,"The code below declares some ",Object(i.b)("em",{parentName:"p"},"valid")," variable names:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"var _daysCount\nvar MinimumCost\nvar page10\nvar Total_elements\n")),Object(i.b)("p",null,"The following declarations are ",Object(i.b)("em",{parentName:"p"},"invalid")," variable names and will not compile:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'// This will produce "SyntaxError: Unexpected number"\nvar 10Students\n\n// This will produce "SyntaxError: Unexpected token &"\nvar First&Second\n')),Object(i.b)("h2",{id:"declaration-and-initialization"},"Declaration and Initialization"),Object(i.b)("p",null,"The first time a variable appears in your script is considered its ",Object(i.b)("em",{parentName:"p"},"declaration"),". The first mention of the variable sets it up in memory, and the name allows you to refer back to it in your subsequent lines of code. You should declare variables using the ",Object(i.b)("inlineCode",{parentName:"p"},"var")," keyword before using them. If you do not initialize a variable that was declared using the ",Object(i.b)("inlineCode",{parentName:"p"},"var")," keyword, it automatically takes on the value ",Object(i.b)("inlineCode",{parentName:"p"},"undefined"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'// Consider the following code:\n\n// Declare firstVar:\nvar firstVar; \n\n// Initialize firstVar:\nfirstVar = 1; \n\n// Declare and Initialize secondVar:\nvar secondVar = "String"; \n\n// Declare thirdVar and fourthVar:\nvar thirdVar, \n    fourthVar; \n\n// Initialize thirdVar:\nthirdVar = true; \n\n// Initialize fourthVar:\nfourthVar = null; \n\n// Declare and Initialize fifthVar and sixthVar:\nvar fifthVar = 1.01, \n    sixthVar = "Sixth"; \n\n// Declare seventhVar:\nvar seventhVar;\n\nconsole.log(firstVar);\nconsole.log(secondVar);\nconsole.log(thirdVar);\nconsole.log(fourthVar);\nconsole.log(fifthVar);\nconsole.log(sixthVar);\nconsole.log(seventhVar);\n')),Object(i.b)("h3",{id:"coercion"},"Coercion"),Object(i.b)("p",null,"In JavaScript, you can perform operations on values of different types without raising an exception. The JavaScript interpreter implicitly converts, or coerces, one of the data types to that of the other, then performs the operation. The rules for coercion of string, number, or boolean values are as follows:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"If you add a number and a string, the number is coerced to a string."),Object(i.b)("li",{parentName:"ul"},"If you add a boolean and a string, the boolean is coerced to a string."),Object(i.b)("li",{parentName:"ul"},"If you add a number and a boolean, the boolean is coerced to a number.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'// Run the code below to learn more about type coercion\n\nfunction print(name, variable) {\n    console.log(\n        name + "(" + variable \n        + ") is a " + typeof variable\n    );\n}\n\nvar someNumber = 10;\nvar someString = "Ten";\nvar someBoolean = false;\n\nvar sumOfNumberAndString = someNumber + someString;\nvar sumOfBooleanAndString = someBoolean + someString;\nvar sumOfNumberAndBoolean = someNumber + someBoolean;\n\nprint("sumOfNumberAndString", sumOfNumberAndString);\nprint("sumOfBooleanAndString", sumOfBooleanAndString);\nprint("sumOfNumberAndBoolean", sumOfNumberAndBoolean);\n')),Object(i.b)("h2",{id:"declaration-keywords"},"Declaration Keywords"),Object(i.b)("h2",{id:"var"},Object(i.b)("inlineCode",{parentName:"h2"},"var")),Object(i.b)("p",null,"We use the ",Object(i.b)("em",{parentName:"p"},"var")," keyword to declare variables. The scope of a variable declared using this keyword is within the context wherever it was declared. For variables declared outside any function, this means they are globally available throughout the program. For variables declared within a function, this means they are only available within the function itself."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'function main(input) {\n    var a = input;\n\n    // If \'a\' is odd:\n    if (a % 2 == 1) {\n        var a = input + 1;\n        console.log("if(a): " + a);\n    }\n\n    console.log("main(a): " + a);\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"# Input\n11\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"# Output\nif(a): 12\nmain(a): 12\n")),Object(i.b)("h3",{id:"solution"},"Solution"),Object(i.b)("p",null,"Click ",Object(i.b)("em",{parentName:"p"},"Run")," above to execute the given code. It works in the following way:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Variable $a$ is declared in the ",Object(i.b)("em",{parentName:"li"},"main")," function using the ",Object(i.b)("em",{parentName:"li"},"var")," keyword and initialized with the given value, $11$."),Object(i.b)("li",{parentName:"ol"},"$a\\%1$ evaluates to ",Object(i.b)("em",{parentName:"li"},"true")," because $ a = 11 $ is odd, so we enter the ",Object(i.b)("em",{parentName:"li"},"if")," block."),Object(i.b)("li",{parentName:"ol"},"Variable is declared a second time inside the ",Object(i.b)("em",{parentName:"li"},"if")," block (still using the ",Object(i.b)("em",{parentName:"li"},"var")," keyword) and initialized with a value of $11+1=12$. We print the value of $a =12$."),Object(i.b)("li",{parentName:"ol"},"We exit the ",Object(i.b)("em",{parentName:"li"},"if")," block and print the value of in ",Object(i.b)("em",{parentName:"li"},"main"),". This value is $12  $ because the scope of the initial declaration of $a$ in ",Object(i.b)("em",{parentName:"li"},"main")," includes the ",Object(i.b)("em",{parentName:"li"},"if")," block.")),Object(i.b)("h2",{id:"let"},Object(i.b)("inlineCode",{parentName:"h2"},"let")),Object(i.b)("p",null,"We use the ",Object(i.b)("em",{parentName:"p"},"let")," keyword to declare variables that are limited in scope to the block, statement, or expression in which they are used. This is unlike the ",Object(i.b)("em",{parentName:"p"},"var")," keyword, which defines a variable globally or locally to an entire function regardless of block scope."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"function main(input) {\n    let a = input;\n\n    // If 'a' is odd:\n    if (a % 2 == 1) {\n        // Increment 'a' by 1\n        let a = input + 1;\n        console.log(\"if(a): \" + a);\n    }\n\n    console.log(\"main(a): \" + a);\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"#Input\n11\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"#Output\nif(a): 12\nmain(a): 11\n")),Object(i.b)("h3",{id:"solution-1"},"Solution"),Object(i.b)("p",null,"Click ",Object(i.b)("em",{parentName:"p"},"Run")," above to execute the given code. It works in the following way:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Variable $a$ is declared in the ",Object(i.b)("em",{parentName:"li"},"main")," function using the ",Object(i.b)("em",{parentName:"li"},"let")," keyword and initialized with the given value, $11$."),Object(i.b)("li",{parentName:"ol"},"$ a%1 $ evaluates to ",Object(i.b)("em",{parentName:"li"},"true")," because $a=11$ is odd, so we enter the ",Object(i.b)("em",{parentName:"li"},"if")," block."),Object(i.b)("li",{parentName:"ol"},"Variable is declared a second time inside the ",Object(i.b)("em",{parentName:"li"},"if")," block (again using the ",Object(i.b)("em",{parentName:"li"},"let")," keyword) and initialized with a value of $11+1=12 $. We print the value of $a=12$ ."),Object(i.b)("li",{parentName:"ol"},"We exit the ",Object(i.b)("em",{parentName:"li"},"if")," block and print the value of in ",Object(i.b)("em",{parentName:"li"},"main"),". Because we used the ",Object(i.b)("em",{parentName:"li"},"let")," keyword for both declarations and the scope of the second declaration of $a$ was limited to the ",Object(i.b)("em",{parentName:"li"},"if")," block, the value of in ",Object(i.b)("em",{parentName:"li"},"main")," is still $ 11$ .")),Object(i.b)("p",null,"It's important to note that you cannot redeclare a variable declared using the ",Object(i.b)("em",{parentName:"p"},"let")," keyword within the same scope as the original variable. An attempt to do this raises an ",Object(i.b)("em",{parentName:"p"},"Error"),", as demonstrated by the code below."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"function main(input) {\n    let a = input;\n\n    // This will throw \"SyntaxError: Identifier 'a' has already been declared\"\n    let a = input + 1;\n\n    console.log(a); \n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"# Input\n11\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"/tmp/submission/20200402/20/52/hackerrank-b4892437722b06e7e4aa7a7d4ffd4b6f/code/Solution.js:12\n    let a = input + 1;\n        ^\n\nSyntaxError: Identifier 'a' has already been declared\n    at Socket.<anonymous> (/tmp/submission/20200402/20/52/hackerrank-b4892437722b06e7e4aa7a7d4ffd4b6f/code/Solution.js:4:5)\n    at Socket.emit (events.js:198:13)\n    at addChunk (_stream_readable.js:288:12)\n    at readableAddChunk (_stream_readable.js:269:11)\n    at Socket.Readable.push (_stream_readable.js:224:10)\n    at Pipe.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)\n")),Object(i.b)("h2",{id:"const"},Object(i.b)("inlineCode",{parentName:"h2"},"const")),Object(i.b)("p",null,"We use the ",Object(i.b)("em",{parentName:"p"},"const")," keyword to create a ",Object(i.b)("em",{parentName:"p"},"read-only")," reference to a value, meaning the value referenced by this variable cannot be reassigned. Because the value referenced by a constant variable cannot be reassigned, JavaScript ",Object(i.b)("em",{parentName:"p"},"requires")," that constant variables always be initialized."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("p",null,"Click ",Object(i.b)("em",{parentName:"p"},"Run")," below to see what happens when you declare a constant variable without initializing it."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'function main(input) {\n    const a = input;\n\n    // This will throw "SyntaxError: Missing initializer in const declaration"\n    const b; \n\n    console.log(a);\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"// Input\n11\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"// Output\nERROR\n")),Object(i.b)("h1",{id:"operators"},"Operators"),Object(i.b)("h2",{id:"operator-types"},"Operator Types"),Object(i.b)("h3",{id:"unary"},"Unary"),Object(i.b)("p",null,"A ",Object(i.b)("em",{parentName:"p"},"unary")," operator requires a single operand, either before or after the operator, following this format:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"operand operator\noperator operand\n")),Object(i.b)("p",null,"For example, in the expression ",Object(i.b)("inlineCode",{parentName:"p"},"a++"),", ",Object(i.b)("inlineCode",{parentName:"p"},"++")," is a unary operator."),Object(i.b)("h3",{id:"binary"},"Binary"),Object(i.b)("p",null,"A ",Object(i.b)("em",{parentName:"p"},"binary")," operator requires two operands, one before the operator and one after the operator, following this format:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"operand1 operator operand2\n")),Object(i.b)("p",null,"For example, in the expression ",Object(i.b)("inlineCode",{parentName:"p"},"a + b = c"),", ",Object(i.b)("inlineCode",{parentName:"p"},"+")," is a binary operator."),Object(i.b)("h3",{id:"ternary"},"Ternary"),Object(i.b)("p",null,"There is one ",Object(i.b)("em",{parentName:"p"},"ternary")," operator, the conditional operator. For example, in the expression ",Object(i.b)("inlineCode",{parentName:"p"},"a ? b : c"),", the use of ",Object(i.b)("inlineCode",{parentName:"p"},"?")," and ",Object(i.b)("inlineCode",{parentName:"p"},":")," in this manner constitutes the ternary operator. We'll discuss this operator more in the ",Object(i.b)("em",{parentName:"p"},"Conditional Statements")," tutorial."),Object(i.b)("h2",{id:"arithmetic-operators"},"Arithmetic Operators"),Object(i.b)("p",null,"An arithmetic operator takes numeric values (either literals or variables) as its operands and returns a single numeric value. The standard arithmetic operators are addition (",Object(i.b)("inlineCode",{parentName:"p"},"+"),"), subtraction (",Object(i.b)("inlineCode",{parentName:"p"},"-"),"), multiplication (",Object(i.b)("inlineCode",{parentName:"p"},"*"),"), and division (",Object(i.b)("inlineCode",{parentName:"p"},"/"),"). Other arithmetic operators are remainder (",Object(i.b)("inlineCode",{parentName:"p"},"%"),"), unary negation (",Object(i.b)("inlineCode",{parentName:"p"},"-"),"), unary plus (",Object(i.b)("inlineCode",{parentName:"p"},"+"),"), increment (",Object(i.b)("inlineCode",{parentName:"p"},"++"),"), decrement (",Object(i.b)("inlineCode",{parentName:"p"},"--"),"), and exponentiation (",Object(i.b)("inlineCode",{parentName:"p"},"**"),")."),Object(i.b)("h3",{id:"1-addition-"},"1. Addition (",Object(i.b)("inlineCode",{parentName:"h3"},"+"),")"),Object(i.b)("p",null,"We use this operator in the form ",Object(i.b)("inlineCode",{parentName:"p"},"operand1 + operand_2"),". For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"2 + 3 // evaluates to 5\n4 + 10 // evaluates to 14\n")),Object(i.b)("h3",{id:"2-subtraction--"},"2. Subtraction (",Object(i.b)("inlineCode",{parentName:"h3"},"-"),")"),Object(i.b)("p",null,"We use this operator in the form ",Object(i.b)("inlineCode",{parentName:"p"},"operand1 - operand2"),". For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"3 - 2 // evaluates to 1\n4 - 10 // evaluates to -6\n")),Object(i.b)("h3",{id:"3-multiplication-"},"3. Multiplication (",Object(i.b)("inlineCode",{parentName:"h3"},"*"),")"),Object(i.b)("p",null,"We use this operator in the form ",Object(i.b)("inlineCode",{parentName:"p"},"operand1 * operand2"),". For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"3 * 2 // evaluates to 6\n4 * 10 // evaluates to 40\n")),Object(i.b)("h3",{id:"4-division-"},"4. Division (",Object(i.b)("inlineCode",{parentName:"h3"},"/"),")"),Object(i.b)("p",null,"We use this operator in the form ",Object(i.b)("inlineCode",{parentName:"p"},"operand1 / operand2"),". For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"6 / 3 // evaluates to 2\n3 / 2 // evaluates to 1.5\n4 / 10 // evaluates to 0.4\n")),Object(i.b)("h3",{id:"5-remainder-"},"5. Remainder (",Object(i.b)("inlineCode",{parentName:"h3"},"%"),")"),Object(i.b)("p",null,"We use this operator in the form ",Object(i.b)("inlineCode",{parentName:"p"},"operand1 % operand2"),". For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"6 % 3 // evaluates to 0\n3 % 2 // evaluates to 1\n4 % 10 // evaluates to 4\n")),Object(i.b)("h3",{id:"6-exponentiation-"},"6. Exponentiation (",Object(i.b)("inlineCode",{parentName:"h3"},"**"),")"),Object(i.b)("p",null,"We use this operator in the form ",Object(i.b)("inlineCode",{parentName:"p"},"operand1 ** operand2"),". This operator is a part of ECMAScript2016 feature set. For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"2 ** 3 // evaluates to 8\n3 ** 2 // evaluates to 9\n5 ** 4 // evaluates to 625\n")),Object(i.b)("h3",{id:"7-unary-negation--"},"7. Unary Negation (",Object(i.b)("inlineCode",{parentName:"h3"},"-"),")"),Object(i.b)("p",null,"We use this operator in the form ",Object(i.b)("inlineCode",{parentName:"p"},"-operand"),". For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"-4 // evaluates to -4\n-(-5) // evaluates to 5 (not --5)\n")),Object(i.b)("h3",{id:"8-unary-plus-"},"8. Unary Plus (",Object(i.b)("inlineCode",{parentName:"h3"},"+"),")"),Object(i.b)("p",null,"We use this operator in the form ",Object(i.b)("inlineCode",{parentName:"p"},"+operand"),". For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"+4 // evaluates to 4\n+(-4) // evaluates to -4\n")),Object(i.b)("h3",{id:"9-increment-"},"9. Increment (",Object(i.b)("inlineCode",{parentName:"h3"},"++"),")"),Object(i.b)("p",null,"We use this operator in the prefix and postfix forms, forms ",Object(i.b)("inlineCode",{parentName:"p"},"++operand")," and ",Object(i.b)("inlineCode",{parentName:"p"},"operand++"),". The prefix form, ",Object(i.b)("inlineCode",{parentName:"p"},"++operand"),", increments the operand by and then returns the value of the operand. The postfix form, ",Object(i.b)("inlineCode",{parentName:"p"},"operand++"),", returns the value of the operand and ",Object(i.b)("em",{parentName:"p"},"then")," increments the operand's value by . For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"function main(input) {\n    var a = input;\n    // Print the value of 'a' and the preincremented value of 'a':\n    console.log(\"a(\" + a + \"), ++a(\" + ++a + \")\");\n    // Assign the current value of 'a' to 'b' and then postincrement 'a':\n    var b = a++;\n    // Print the values of 'a' once and 'b' twice, then postincrement the 2nd 'b':\n    console.log(\"a(\" + a + \"), b(\" + b + \"), b++(\" + b++ + \")\");\n    // Print the final values of 'a' and 'b':\n    console.log(\"a(\" + a + \"), b(\" + b + \")\");\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"# Input\n4\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"# Output\na(4), ++a(5)\na(6), b(5), b++(5)\na(6), b(6)\n")),Object(i.b)("h3",{id:"10-decrement---"},"10. Decrement (",Object(i.b)("inlineCode",{parentName:"h3"},"--"),")"),Object(i.b)("p",null,"We use this operator in the prefix and postfix forms, forms ",Object(i.b)("inlineCode",{parentName:"p"},"--operand")," and ",Object(i.b)("inlineCode",{parentName:"p"},"operand--"),". The prefix form, ",Object(i.b)("inlineCode",{parentName:"p"},"--operand"),", decrements the operand by and then returns the value of the operand $1$. The postfix form, ",Object(i.b)("inlineCode",{parentName:"p"},"operand--"),", returns the value of the operand and ",Object(i.b)("em",{parentName:"p"},"then")," decrements the operand's value by $1$ . For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"function main(input) {\n    var a = input;\n    // Print the value of 'a' and the predecremented value of 'a':\n    console.log(\"a(\" + a + \"), --a(\" + --a + \")\");\n    // Assign the current value of 'a' to 'b' and then postdecrement 'a':\n    var b = a--;\n    // Print the values of 'a' once and 'b' twice, then postdecrement the 2nd 'b':\n    console.log(\"a(\" + a + \"), b(\" + b + \"), b--(\" + b-- + \")\");\n    // Print the final values of 'a' and 'b':\n    console.log(\"a(\" + a + \"), b(\" + b + \")\");\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"# Input\n4\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"# Output\n\na(4), --a(3)\na(2), b(3), b--(3)\na(2), b(2)\n")),Object(i.b)("h1",{id:"functions"},"Functions"),Object(i.b)("p",null,"Functions in JavaScript are declared using the ",Object(i.b)("inlineCode",{parentName:"p"},"function")," keyword. A function declaration creates a function that's a ",Object(i.b)("em",{parentName:"p"},"Function")," object having all the properties, methods, and behaviors of Function objects. By default, functions return the value ",Object(i.b)("inlineCode",{parentName:"p"},"undefined"),"; to return any other value, the function must have a return statement that consists of the ",Object(i.b)("inlineCode",{parentName:"p"},"return")," keyword followed by the value to be returned (this can be a literal value, a variable, or even a call to a function)."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("p",null,"Take some time to review the code below that declares functions and prints their return values."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Input Format")),Object(i.b)("p",null,"The first line contains a string denoting .\nThe second line contains two space-separated integers, and , to be summed."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'// function greetings(name) {\n    console.log("Hello, " + name);\n}\n\nfunction sum(a, b) {\n    return a + b;\n}\n\nfunction main(name, a, b) {\n    greetings(name);\n    console.log(sum(a, b));\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"# Input\nJulia\n8 2\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"# Output\nHello, Julia\n10\n")),Object(i.b)("h2",{id:"the-function-expression"},"The Function Expression"),Object(i.b)("p",null,"A function expression is very similar to (and has almost the same syntax as) a function statement. The main difference between a ",Object(i.b)("em",{parentName:"p"},"function expression")," and a ",Object(i.b)("em",{parentName:"p"},"function statement")," is the function ",Object(i.b)("em",{parentName:"p"},"name"),", which can be omitted from a function expression to create an ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Anonymous_function"}),"anonymous function"),". Function expressions are often used as ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Immediately-invoked_function_expression"}),"Immediately Invoked Function Expressions")," (IIFEs), which run as soon as they're defined."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"unnamed-function-expression"},"Unnamed Function Expression"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("p",null,"The code below demonstrates a ",Object(i.b)("em",{parentName:"p"},"named")," function expression."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Input Format")),Object(i.b)("p",null,"Two space-separated integers describing the respective values of $factN$ and $fibN$."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"function main(factN, fibN) {\n\n    /**\n    *   Defines a named recursive function as a property of the math variable. \n    *   @param {Number} n\n    *   @returns {Number} The value of n factorial.         \n    **/\n    var math = {\n        // Declare the factorial property\n        factorial: \n            // Declare the function as the property's value\n            function factorial(n) {\n                if (n > 1) {\n                    return n * factorial(n - 1);\n                }\n                // Returns 1 if n <= 1\n                return 1;\n            }\n    };\n\n    /**\n    *   Defines a named recursive function referenced by the fib variable. \n    *   @param {Number} n\n    *   @returns {Number} The value of fibonacci(n).         \n    **/\n    var fib = function fibonacci(n){\n        if (n > 2) {\n            return fibonacci(n - 1) + fibonacci(n - 2);\n        }\n        else if (n < 1) {\n            return 0;\n        }\n        // else, return 1\n        return 1;\n    }\n\n    // Print the value returned by passing factN as n to the \n    // function referenced by variable math:\n    console.log(math.factorial(factN));\n    // and by passing fibN as n to the function referenced by variable fib:\n    console.log(fib(fibN));\n\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"# Input\n5 11\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"# Output\n120\n89\n")),Object(i.b)("h2",{id:"recursion"},"Recursion"),Object(i.b)("p",null,"This is an extremely important algorithmic concept that involves splitting a problem into two parts: a ",Object(i.b)("em",{parentName:"p"},"base case")," and a ",Object(i.b)("em",{parentName:"p"},"recursive case"),". The problem is divided into smaller subproblems which are then solved recursively until such time as they are small enough and meet some base case; once the base case is met, the solutions for each subproblem are combined and their result is the answer to the entire problem."),Object(i.b)("p",null,"If the base case is not met, the function's recursive case calls the function again with modified values. The code must be structured in such a way that the base case is reachable after some number of iterations, meaning that each subsequent modified value should bring you closer and closer to the base case; otherwise, you'll be stuck in the dreaded ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Infinite_loop"}),"infinite loop"),"!"),Object(i.b)("p",null,"It's important to note that any task that can be accomplished recursively can also be performed ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Iteration#Computing"}),"iteratively")," (i.e., through a sequence of repeatable steps). Recursive solutions tend to be easier to read and understand than iterative ones, but there are often performance drawbacks associated with recursive solutions that you're going to want to evaluate on a case-by-case basis. Typically, we use recursion when each recursive call significantly reduces the size of the problem (e.g., if we can halve the dataset during each recursive call). Regardless of the advisability of recursively solving a problem, it's extremely important to practice and understand ",Object(i.b)("em",{parentName:"p"},"how")," to recursively solve problems."),Object(i.b)("h2",{id:"example-java-reescrever-em-js"},"Example (Java, reescrever em js)"),Object(i.b)("p",null,"The code below produces the multiple of two numbers by combining addition and recursion."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Input Format"),"\nTwo space-separated integers to be multiplied."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import java.util.*;\n\nclass Solution {\n    // Multiply 'n' by 'k' using addition:\n    private static int nTimesK(int n, int k) {\n        // Print current value of n\n        System.out.println(\"n: \" + n);\n\n        // Recursive Case\n        if(n > 1) { \n            return k + nTimesK(n - 1, k);\n        }\n        // Base Case n = 1\n        else { \n            return k;\n        }\n    }\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int result = nTimesK(scanner.nextInt(), scanner.nextInt());\n        scanner.close();\n        System.out.println(\"Result: \" + result);\n    }\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"# Input\n4 4\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"# Output\n\nn: 4\nn: 3\nn: 2\nn: 1\nResult: 16\n")),Object(i.b)("p",null,"The diagram below depicts the execution of the code above using the default input (",Object(i.b)("inlineCode",{parentName:"p"},"4 4"),"). Each call to ",Object(i.b)("em",{parentName:"p"},"nTimesK")," is represented by a bubble, and each new recursive call bubble is stacked inside and on top of the bubble that was responsible for calling it. The function recursively calls itself using reduced values until it reaches the base case ($n=1$). Once it reaches the base case, it passes back the base case's return value ($k=4$) to the bubble that called it and continues passing back ",Object(i.b)("inlineCode",{parentName:"p"},"k +")," the previously returned value until the final result (i.e.: the multiplication by addition result of $n\\ x\\ k$) is returned."),Object(i.b)("p",null,Object(i.b)("img",Object(n.a)({parentName:"p"},{src:"https://s3.amazonaws.com/hr-challenge-images/17162/1456174849-459a4048f8-Recursion2.png",alt:"Recursion 2.png"}))),Object(i.b)("p",null,"Once the code hits the base case in the $4^{th}$ bubble, it returns $k$ (which is $4$ ) to the $3^{rd}$ bubble.\nThen the $3^{rd}$ bubble returns $k+4$, which is $8$, to the $2^{nd}$ bubble.\nThen the $2^{rd}$ bubble returns $k+8$, , which is $12 $, to the $1^{st}$ bubble.\nThen the $1^{rd}$  bubble returns $k+12$,, which is $16 $, to the first line in ",Object(i.b)("em",{parentName:"p"},"main")," as the result for $nTimesK(4,4)$ , which assigns $ 16 $ to the variable."),Object(i.b)("h1",{id:"comparison-operators"},"Comparison Operators"),Object(i.b)("h2",{id:"equality-"},"Equality (",Object(i.b)("inlineCode",{parentName:"h2"},"=="),")"),Object(i.b)("p",null,"The equality operator is a binary operator that compares two operands, returning ",Object(i.b)("em",{parentName:"p"},"true")," if they are deemed to be equal. It works by converting the operands if they are not of the same type, then applying strict comparison. If both operands are primitive types, it will compare their values (i.e., ",Object(i.b)("inlineCode",{parentName:"p"},"1 == 1")," evaluates to ",Object(i.b)("em",{parentName:"p"},"true"),"). If both operands are objects, then JavaScript compares their internal references; this means it checks to see if both operands point to the same object (i.e., location) in memory. For example:"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"console.log(1 == 1);\nconsole.log(1 == \"1\");\nconsole.log('1' == 1);\nconsole.log(0 == false);\nconsole.log(0 == null);\nconsole.log(0 == undefined);\nconsole.log(null == undefined);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\ntrue\n")),Object(i.b)("h2",{id:"inequality-"},"Inequality (",Object(i.b)("inlineCode",{parentName:"h2"},"!="),")"),Object(i.b)("p",null,"The inequality operator is a binary operator that returns ",Object(i.b)("em",{parentName:"p"},"true")," if the operands are ",Object(i.b)("em",{parentName:"p"},"not equal"),". If the two operands are of different types, JavaScript attempts to convert the operands to an appropriate type to compare them. If both operands are objects, then JavaScript compares the internal references to see if they are not equal (i.e., refer to different objects in memory)."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"console.log(1 != 1);\nconsole.log(1 != \"1\");\nconsole.log('1' != 1);\nconsole.log(0 != false);\nconsole.log(0 != null);\nconsole.log(0 != undefined);\nconsole.log(null != undefined);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nfalse\nfalse\nfalse\nfalse\ntrue\ntrue\nfalse\n")),Object(i.b)("h2",{id:"example-comparing-objects"},"Example: Comparing Objects"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("p",null,"Consider the following diagrams:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"In this diagram, we have two references that point to different objects that ",Object(i.b)("em",{parentName:"li"},"look")," the same:\n",Object(i.b)("img",Object(n.a)({parentName:"li"},{src:"https://s3.amazonaws.com/hr-assets/0/1516121795-0271dbe403-ScreenShot2018-01-16at9.58.07PM.png",alt:"image"}))),Object(i.b)("li",{parentName:"ol"},"In this diagram, we have two references that point to the same object:\n",Object(i.b)("img",Object(n.a)({parentName:"li"},{src:"https://s3.amazonaws.com/hr-challenge-images/0/1479860915-47c1c5c64b-equality.png",alt:"image"})))),Object(i.b)("p",null,"Click ",Object(i.b)("em",{parentName:"p"},"Run")," below to see this in code."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'// This creates a custom object named MyObject\nclass MyObject {\n    // Each object of this type has an attribute named \'magic\'\n    constructor(magic) {\n        this.magic = magic;\n    }\n    // We\'ll discuss this syntax in more detail later\n}\n\n// Create two objects \nvar variable1 = new MyObject(":)");\nvar variable2 = new MyObject(":)");\n\n// Print the result of an equality comparison\nconsole.log( variable1.magic + " == " + variable2.magic\n            + " evaluates to "\n            + (variable1 == variable2)\n            );\n\n// Set variable1 to reference the same object as variable2\nvariable1 = variable2;\n// Print the result of an equality comparison\nconsole.log( variable1.magic + " == " + variable2.magic\n            + " evaluates to "\n            + (variable1 == variable2)\n            );\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n:) == :) evaluates to false\n:) == :) evaluates to true\n")),Object(i.b)("h2",{id:"identity-or-strict-equality-"},"Identity or Strict Equality (",Object(i.b)("inlineCode",{parentName:"h2"},"==="),")"),Object(i.b)("p",null,"The identity operator returns ",Object(i.b)("em",{parentName:"p"},"true")," if both of the following conditions are satisfied:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The operands are strictly equal."),Object(i.b)("li",{parentName:"ul"},"The operands are of the same type.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"console.log(1 === 1);\nconsole.log(1 === \"1\");\nconsole.log('1' === 1);\nconsole.log(0 === false);\nconsole.log(0 === null);\nconsole.log(0 === undefined);\nconsole.log(null === undefined);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n")),Object(i.b)("h2",{id:"non-identity-or-strict-inequality-"},"Non-Identity or Strict Inequality (",Object(i.b)("inlineCode",{parentName:"h2"},"!=="),")"),Object(i.b)("p",null,"The non-identity operator returns ",Object(i.b)("em",{parentName:"p"},"true")," if the operands satisfy any of the following conditions:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The operands are not equal."),Object(i.b)("li",{parentName:"ul"},"The operands are not of the same type.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"console.log(1 !== 1);\nconsole.log(1 !== \"1\");\nconsole.log('1' !== 1);\nconsole.log(0 !== false);\nconsole.log(0 !== null);\nconsole.log(0 !== undefined);\nconsole.log(null !== undefined);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n")),Object(i.b)("h1",{id:"relational-operators"},"Relational Operators"),Object(i.b)("h2",{id:"greater-than-operator-"},"Greater Than Operator (",Object(i.b)("inlineCode",{parentName:"h2"},">"),")"),Object(i.b)("p",null,"This binary operator returns ",Object(i.b)("em",{parentName:"p"},"true")," if the left operand is greater than the right operand; otherwise, it returns ",Object(i.b)("em",{parentName:"p"},"false"),"."),Object(i.b)("h2",{id:"greater-than-or-equal-operator-"},"Greater Than or Equal Operator (",Object(i.b)("inlineCode",{parentName:"h2"},">="),")"),Object(i.b)("p",null,"This binary operator returns ",Object(i.b)("em",{parentName:"p"},"true")," if the left operand is greater than or equal to the right operand; otherwise, it returns ",Object(i.b)("em",{parentName:"p"},"false"),"."),Object(i.b)("h2",{id:"less-than-operator-"},"Less Than Operator (",Object(i.b)("inlineCode",{parentName:"h2"},"<"),")"),Object(i.b)("p",null,"This binary operator returns ",Object(i.b)("em",{parentName:"p"},"true")," if the left operand is less than the right operand; otherwise, it returns ",Object(i.b)("em",{parentName:"p"},"false"),"."),Object(i.b)("h2",{id:"less-than-or-equal-operator-"},"Less Than or Equal Operator (",Object(i.b)("inlineCode",{parentName:"h2"},"<="),")"),Object(i.b)("p",null,"This binary operator returns ",Object(i.b)("em",{parentName:"p"},"true")," if the left operand is less than or equal to the right operand; otherwise, it returns ",Object(i.b)("em",{parentName:"p"},"false"),"."),Object(i.b)("h2",{id:"example-relational-operators"},"Example: Relational Operators"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"console.log(5 > 5);\nconsole.log(5 >= 5);\nconsole.log(7 < 6);\nconsole.log(4 <= 6);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nfalse\ntrue\nfalse\ntrue\n")),Object(i.b)("h1",{id:"logical-operators"},"Logical Operators"),Object(i.b)("h2",{id:"logical-and-"},"Logical AND (",Object(i.b)("inlineCode",{parentName:"h2"},"&&"),")"),Object(i.b)("p",null,"Usage: ",Object(i.b)("inlineCode",{parentName:"p"},"expression1 && expression2")),Object(i.b)("p",null,"If both expressions evaluate to ",Object(i.b)("em",{parentName:"p"},"true"),", then it returns ",Object(i.b)("em",{parentName:"p"},"true"),"; otherwise, it returns ",Object(i.b)("em",{parentName:"p"},"false"),"."),Object(i.b)("h2",{id:"logical-or-"},"Logical OR (",Object(i.b)("inlineCode",{parentName:"h2"},"||"),")"),Object(i.b)("p",null,"Usage: ",Object(i.b)("inlineCode",{parentName:"p"},"expression1 || expression2")),Object(i.b)("p",null,"If both expressions evaluate to ",Object(i.b)("em",{parentName:"p"},"false"),", then it returns ",Object(i.b)("em",{parentName:"p"},"false"),"; otherwise, it returns ",Object(i.b)("em",{parentName:"p"},"true"),"."),Object(i.b)("h2",{id:"logical-not-"},"Logical NOT (",Object(i.b)("inlineCode",{parentName:"h2"},"!"),")"),Object(i.b)("p",null,"Usage: ",Object(i.b)("inlineCode",{parentName:"p"},"!expression")," If the expression (by itself) evaluates to ",Object(i.b)("em",{parentName:"p"},"false"),", it returns ",Object(i.b)("em",{parentName:"p"},"true")," (i.e., the logical negation of ",Object(i.b)("em",{parentName:"p"},"false"),"); otherwise, it returns ",Object(i.b)("em",{parentName:"p"},"false"),"."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"console.log((5 < 7) && (4 < 4))\nconsole.log((5 < 7) && (4 >= 4))\nconsole.log((5 < 7) || (4 < 4)) \nconsole.log((5 >= 7) || (4 > 4))\nconsole.log(!(2**3))\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nfalse\ntrue\ntrue\nfalse\nfalse\n")),Object(i.b)("h2",{id:"short-circuit-evaluation"},"Short-Circuit Evaluation"),Object(i.b)("p",null,"As logical expressions are evaluated from left to right, they are tested for possible ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Short-circuit_evaluation"}),"short-circuit evaluation")," using the following rules:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"false && expression")," is short-circuit evaluated to ",Object(i.b)("em",{parentName:"p"},"false"),".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"true || expression")," is short-circuit evaluated to ",Object(i.b)("em",{parentName:"p"},"true"),"."))),Object(i.b)("h2",{id:"if-else-statements"},"If-Else Statements"),Object(i.b)("p",null,"Use the ",Object(i.b)("em",{parentName:"p"},"if")," statement to execute a statement if a logical condition (i.e., some statement that evaluates to ",Object(i.b)("em",{parentName:"p"},"true")," or ",Object(i.b)("em",{parentName:"p"},"false"),") is ",Object(i.b)("em",{parentName:"p"},"true"),". Use the optional ",Object(i.b)("em",{parentName:"p"},"else")," clause to execute a statement ",Object(i.b)("em",{parentName:"p"},"only in the event that the if condition evaluates to false"),". The code below demonstrates the basic syntax for this:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"if (condition) {\n    statement1;\n} \nelse {\n    statement2;\n}\n")),Object(i.b)("p",null,"In the code above:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"$condition $ can be any expression that evaluates to ",Object(i.b)("em",{parentName:"li"},"true")," or ",Object(i.b)("em",{parentName:"li"},"false"),"."),Object(i.b)("li",{parentName:"ul"},"If $condition $ evaluates to ",Object(i.b)("em",{parentName:"li"},"true"),", then $statement1$ is executed; otherwise, $statement2$ is executed."),Object(i.b)("li",{parentName:"ul"},"$statement1 $ and $statement2 $ represent any statement (or sequence of statements), including additional nested ",Object(i.b)("em",{parentName:"li"},"if")," statements.")),Object(i.b)("p",null,"The code below demonstrates multiple statements inside an ",Object(i.b)("em",{parentName:"p"},"if-else")," block:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"if (condition1) {\n    statement1;\n    statement4;\n    statement5;\n} \nelse {\n    statement2;\n    statement3;\n    if (condition2) {\n        statement6;\n    }\n}\n")),Object(i.b)("p",null,"Additionally, you can compound the statements using the ",Object(i.b)("em",{parentName:"p"},"else-if")," clause to test multiple conditions in sequence:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"if (condition1) {\n    statement1;\n} \nelse if (condition2) {\n    statement2;\n} \nelse if (conditionN) {\n    statementN;\n} \nelse {\n    statementLast;\n}\n")),Object(i.b)("p",null,"Chaining related logic conditions using ",Object(i.b)("em",{parentName:"p"},"else-if")," in this way has a few benefits:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"When there are multiple conditions being checked within a chained sequence of statements, only the first logical condition to evaluate to true will be executed. This also means that after one of the logical conditions evaluates to true, any subsequent logical statements in the block will be skipped over. For example, let's say $condition1$ in the code above evaluates to ",Object(i.b)("em",{parentName:"li"},"false"),", but $condition2$ evaluates to ",Object(i.b)("em",{parentName:"li"},"true"),". If this happens, the program will execute $ statement2$ and then jump to the end of the chain of statements and continue executing (meaning it skips over $conditionN$ and the last ",Object(i.b)("em",{parentName:"li"},"else"),")."),Object(i.b)("li",{parentName:"ul"},"If a later condition check is reached, you know that all the preceding condition checks within that chain all evaluated to false. This means you don't have to re-check certain conditions. Try changing the integer in the ",Object(i.b)("em",{parentName:"li"},"Input")," box below and clicking ",Object(i.b)("em",{parentName:"li"},"Run")," to see this in code:")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'function classifyAge(age) {\n    /* First, let\'s check the lower bound on our age range: */\n    if (age < 13) {\n        return age + " is a child.";\n    }\n    /* If this condition is checked, we know that age < 13 is false: */\n    else if (age < 20) {\n        return age + " is a teenager.";\n    }\n    /* If this condition is checked, we know both of these are false:\n    *   age < 13 is false\n    *   age < 20 is false\n    *  This tells us that either age >= 20 is true, or age is not a number:\n    */\n    else if (age >= 20){\n        return age + " is an adult.";\n    }\n    /* The input wasn\'t a number. */\n    else {\n        return "Your input must be an integer.";\n    }\n}\n\nfunction main(input) {\n    console.log(classifyAge(input));\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Input\n12\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n12 is a child.\n")),Object(i.b)("h2",{id:"falsy-values"},"Falsy Values"),Object(i.b)("p",null,"The following six values are known as ",Object(i.b)("em",{parentName:"p"},"Falsy")," values, meaning they evaluate to ",Object(i.b)("em",{parentName:"p"},"false"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"false")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"undefined")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"null")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"0")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"NaN")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'""')," (i.e., the empty string)")),Object(i.b)("p",null,"All other values, including all objects, evaluate to true when used as the ",Object(i.b)("em",{parentName:"p"},"condition")," in a conditional statement. Click ",Object(i.b)("em",{parentName:"p"},"Run")," below to see this in code."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'var a = true;\nvar b = new Boolean(false);\nvar c = "";\n\nconsole.log(a);\nconsole.log(b);\nconsole.log("\\"" + c + "\\"");\n\nif (a) {\n    console.log("Hello from a");\n}\n\nif (b) {\n    console.log("Hello from b");\n}\n\nif (c) {\n    console.log("Hello from c");\n}\nelse {\n    console.log("c is false");\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'// Output\ntrue\n[Boolean: false]\n""\nHello from a\nHello from b\nc is false\n')),Object(i.b)("h2",{id:"conditional-ternary-operator"},"Conditional (Ternary) Operator"),Object(i.b)("p",null,"The conditional (ternary) operator is the only JavaScript operator that takes three operands, and it's used as a shortcut for the ",Object(i.b)("em",{parentName:"p"},"if")," statement. The basic syntax is:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"condition ? trueStatement : falseStatement\n")),Object(i.b)("p",null,"You can essentially read the ",Object(i.b)("inlineCode",{parentName:"p"},"?"),' as the word "then" and the ',Object(i.b)("inlineCode",{parentName:"p"},":"),' as the word "else". If $ condition$ evaluates to true, then ',Object(i.b)("inlineCode",{parentName:"p"},"trueStatement")," is executed; else, ",Object(i.b)("inlineCode",{parentName:"p"},"falseStatement")," is executed. For example, try changing the integer in the ",Object(i.b)("em",{parentName:"p"},"Input")," box below and clicking ",Object(i.b)("em",{parentName:"p"},"Run")," to see this in code:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'function main(input) {\n    // The examples below all accomplish the same thing.\n\n    // Example 1:\n    input % 2 == 0 ? console.log(input + " is EVEN") : console.log(input + " is ODD");\n\n    // Example 2:\n    console.log( input + " is " + ((input % 2 == 0) ? "EVEN" : "ODD"));\n\n    // Example 3:\n    var parity = input % 2 == 0 ? "EVEN" : "ODD";\n    console.log(input + " is " + parity);\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Input\n4\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n4 is EVEN\n4 is EVEN\n4 is EVEN\n")),Object(i.b)("h1",{id:"switch-conditional-statements"},"Switch Conditional Statements"),Object(i.b)("p",null,"A ",Object(i.b)("em",{parentName:"p"},"switch")," statement allows a program to evaluate an expression by attempting to match the expression's value to a ",Object(i.b)("em",{parentName:"p"},"case label"),". If a match is found, the program jumps to the statement(s) associated with the matched label and continues executing at that point. Note that execution will continue sequentially through all the statements starting at the jump point unless there is a call to ",Object(i.b)("inlineCode",{parentName:"p"},"break;"),", which exits the switch statement. A switch statement looks like this:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"switch (expression) {\n    case label1:\n        statement1;\n        break;\n    case label2:\n        statement2;\n        break;\n    case label3:\n        statement3;\n        statement4;\n        break;\n    default:\n        statement;\n}\n")),Object(i.b)("p",null,"The program first looks for a ",Object(i.b)("inlineCode",{parentName:"p"},"case")," clause with a label matching the value of $expression$ , then transfers control to the matching clause and executes the associated statements. If no matching label is found, the program looks for the optional ",Object(i.b)("em",{parentName:"p"},"default")," clause and, if found, transfers control to that clause and executes the statements associated with it. If no ",Object(i.b)("inlineCode",{parentName:"p"},"default")," clause is found, the program continues executing after the end of the switch statement."),Object(i.b)("h2",{id:"the-default-clause"},"The ",Object(i.b)("inlineCode",{parentName:"h2"},"default")," Clause"),Object(i.b)("p",null,"By convention, the ",Object(i.b)("inlineCode",{parentName:"p"},"default")," clause is always listed last. This is because the statements are checked sequentially, so you run into the following issues if you use the ",Object(i.b)("inlineCode",{parentName:"p"},"default")," label in an earlier clause:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"If the ",Object(i.b)("inlineCode",{parentName:"li"},"default")," case is listed ",Object(i.b)("em",{parentName:"li"},"before")," (above) a case that matches $expression $ , it will match the ",Object(i.b)("inlineCode",{parentName:"li"},"default")," case instead. This means the statements associated with the programmed match case won't be executed."),Object(i.b)("li",{parentName:"ul"},"If the ",Object(i.b)("inlineCode",{parentName:"li"},"default")," case doesn't have a break statement, any statements in the case label immediately following it will be executed.")),Object(i.b)("h2",{id:"the-break-statement"},"The ",Object(i.b)("inlineCode",{parentName:"h2"},"break;")," Statement"),Object(i.b)("p",null,"The break statement is optional, but you'll typically see one at the end of each ",Object(i.b)("inlineCode",{parentName:"p"},"case")," clause to ensure that the program breaks out of the switch statement once the statements associated with a matched case are executed. Once the flow of execution hits ",Object(i.b)("inlineCode",{parentName:"p"},"break;"),", it exits the switch statement and continues executing at the next line following the end of the switch statement; if the break statement is omitted, the program continues executing the next statement in the switch statement \u2014 even if its case label doesn't match $ expression $."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("p",null,"Given an integer, $n$, such that $0 < n < 11$ , do the following:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"If $n$ is equal to $2$, print ",Object(i.b)("inlineCode",{parentName:"li"},"A"),"."),Object(i.b)("li",{parentName:"ol"},"If $n$ is equal to $3$, print ",Object(i.b)("inlineCode",{parentName:"li"},"B"),"."),Object(i.b)("li",{parentName:"ol"},"If $n$ is equal to $4$, print ",Object(i.b)("inlineCode",{parentName:"li"},"C"),"."),Object(i.b)("li",{parentName:"ol"},"If $n$  is equal to $5$, print ",Object(i.b)("inlineCode",{parentName:"li"},"D")),Object(i.b)("li",{parentName:"ol"},"For all the other values of $n$, print ",Object(i.b)("inlineCode",{parentName:"li"},"E"),".")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Input Format")),Object(i.b)("p",null,"A single integer denoting $n$."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'function switchDemo() {\n    var n = parseInt(readLine());\n\n    switch (n) {\n        case 2:\n            console.log("A");\n            break;\n        case 3:\n            console.log("B");\n            break;\n        case 4:\n            console.log("C");\n            break;\n        case 5:\n            console.log("D");\n            break;\n        default:\n            console.log("E");\n    }\n\n    console.log("Exited switch.");\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Input\n4\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nC\nExited switch.\n")),Object(i.b)("p",null,"Run the code above with the given input, and then try replacing that input with other integers and seeing how it changes. Note that, once reached, the ",Object(i.b)("inlineCode",{parentName:"p"},"break;")," statements transfer control back outside of the switch statement to the next line of code (in this example, there is no more code to execute)."),Object(i.b)("p",null,"Now, let's consider the same problem, but this time we'll remove all the ",Object(i.b)("inlineCode",{parentName:"p"},"break;")," statements from our code:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'function switchDemo() {\n    var n = parseInt(readLine());\n\n    switch (n) {\n        case 2:\n            console.log("A");\n        case 3:\n            console.log("B");\n        case 4:\n            console.log("C");\n        case 5:\n            console.log("D");\n        default:\n            console.log("E");\n    }\n\n    console.log("Exited switch.");\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Input\n4\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nC\nD\nE\nExited switch.\n")),Object(i.b)("p",null,"Run the code above with the given input, and then try replacing that input with other integers and seeing how it changes. Observe that the statements execute sequentially, starting with the matching case."),Object(i.b)("p",null,"Now, let's look at what happens if we don't parse the input as an integer:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'function switchDemo() {\n    // This will read n as an object.\n    var n = readLine();\n\n    switch (n) {\n        case 2:\n            console.log("A");\n            break;\n        case 3:\n            console.log("B");\n            break;\n        case 4:\n            console.log("C");\n            break;\n        case 5:\n            console.log("D");\n            break;\n        default:\n            console.log("E");\n    }\n\n    console.log("Exited switch.");\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Input\n4\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nE\nExited switch.\n")),Object(i.b)("p",null,"Run the code above with the given input, and observe that the code ",Object(i.b)("em",{parentName:"p"},"does not")," parse as an integer. This means it's evaluated as an object, where a strict comparison (",Object(i.b)("inlineCode",{parentName:"p"},"==="),") is made comparing the ",Object(i.b)("em",{parentName:"p"},"case label")," to the ",Object(i.b)("em",{parentName:"p"},"expression value"),"."),Object(i.b)("h2",{id:"multi-criteria-case"},"Multi-Criteria Case"),Object(i.b)("p",null,"In the example below, we consider a similar problem in which there are multiple criteria for each case."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("p",null,"Given an integer, $n$ , such that $0 < n < 11$ , do the following:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"If $n$ is equal to $2$, print ",Object(i.b)("inlineCode",{parentName:"li"},"A"),"."),Object(i.b)("li",{parentName:"ol"},"If $n$ is equal to $4$, print ",Object(i.b)("inlineCode",{parentName:"li"},"A"),"."),Object(i.b)("li",{parentName:"ol"},"If $n$ is equal to $6$, print ",Object(i.b)("inlineCode",{parentName:"li"},"A"),"."),Object(i.b)("li",{parentName:"ol"},"If $n$ is equal to $3$, print ",Object(i.b)("inlineCode",{parentName:"li"},"B"),"."),Object(i.b)("li",{parentName:"ol"},"If $n$ is equal to $5$, print ",Object(i.b)("inlineCode",{parentName:"li"},"B"),"."),Object(i.b)("li",{parentName:"ol"},"If $n$ is equal to $7$, print ",Object(i.b)("inlineCode",{parentName:"li"},"B"),"."),Object(i.b)("li",{parentName:"ol"},"For all other values of $n$, print ",Object(i.b)("inlineCode",{parentName:"li"},"C"),".")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Input Format")),Object(i.b)("p",null,"A single integer denoting $n$."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'function switchDemo() {\n    var n = +(readLine());\n\n    switch (n) {\n        case 2:\n        case 4:\n        case 6:\n            console.log("A");\n            break;\n        case 3:\n        case 5:\n        case 7:\n            console.log("B");\n            break;\n        default:\n            console.log("C");\n    }\n\n    console.log("Exited switch.");\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Input\n4\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nA\nExited switch.\n")),Object(i.b)("p",null,"Run the code above with the given input, and then try replacing that input with other integers and seeing how it changes."),Object(i.b)("h2",{id:"string-basics"},"String Basics"),Object(i.b)("h2",{id:"javascript-strings"},"JavaScript Strings"),Object(i.b)("p",null,"These are chains of zero or more Unicode characters (i.e., letters, digits, and punctuation marks) used to represent text."),Object(i.b)("p",null,"We denote string literals by enclosing them in single (",Object(i.b)("inlineCode",{parentName:"p"},"'"),") or double (",Object(i.b)("inlineCode",{parentName:"p"},'"'),") quotation marks. Double quotation marks can be contained in strings surrounded by single quotation marks (e.g., ",Object(i.b)("inlineCode",{parentName:"p"},"'\"'")," evaluates to ",Object(i.b)("inlineCode",{parentName:"p"},'"'),"), and single quotation marks can be contained in strings surrounded by double quotation marks (e.g., ",Object(i.b)("inlineCode",{parentName:"p"},'"\'"')," evaluates to ",Object(i.b)("inlineCode",{parentName:"p"},"'"),"). In addition, you can also enclose a single or double quotation within another quotation of its same type by preceding the quotation you wish to have interpreted literally with the escape character (",Object(i.b)("inlineCode",{parentName:"p"},"\\"),")."),Object(i.b)("p",null,"Each string has a property called ",Object(i.b)("inlineCode",{parentName:"p"},"String.length")," denoting the length of, or number of characters in, the string. For example, if we write ",Object(i.b)("inlineCode",{parentName:"p"},'var s = "Hello."'),", the value of ",Object(i.b)("inlineCode",{parentName:"p"},"s.length")," is $6$."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"function main() {\n    console.log(\"\\\"\" + input + \"\\\"\");\n    console.log('\\'' + input + '\\'');\n    console.log(input.length);\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Input\nHackerRank\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n\"HackerRank\"\n'HackerRank'\n10\n")),Object(i.b)("h2",{id:"string-constructor"},"String Constructor"),Object(i.b)("p",null,"To create a new string, we use the syntax ",Object(i.b)("inlineCode",{parentName:"p"},"String(value)")," where denotes the data we want to turn into a string."),Object(i.b)("p",null,"Click ",Object(i.b)("em",{parentName:"p"},"Run")," below to see the string constructor in code."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'var myNumber = 4;\nvar myString = String(myNumber);\n\nconsole.log(myNumber + " is a " + typeof myNumber);\nconsole.log(myString  + " is a " + typeof myString)\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n4 is a number\n4 is a string\n")),Object(i.b)("p",null,"Observe that the value ",Object(i.b)("inlineCode",{parentName:"p"},"4")," assigned to the variable is typed as a ",Object(i.b)("em",{parentName:"p"},"number"),", and that the variable is typed as a string because we passed to the string constructor."),Object(i.b)("hr",null),Object(i.b)("h1",{id:"methods"},"Methods"),Object(i.b)("p",null,"Here are some frequently used methods that operate on strings:"),Object(i.b)("h2",{id:"stringcharat"},Object(i.b)("inlineCode",{parentName:"h2"},"String.charAt()")),Object(i.b)("p",null,"Returns the character at the specified index. For example:"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'var input = "";\nprocess.stdin.on(\'data\', function (data) {\n    input = data;\n    main();\n});\nfunction readLine() { return input; }\n/** Ignore above this line. **/\nvar s = "HackerRank";\nvar i = +(readLine());\nconsole.log(s.charAt(i));\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Input\n6\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n/tmp/submission/20200402/22/02/hackerrank-52ae9cfae8a6e38b352afc3268fec0de/code/Solution.js:4\n    main();\n    ^\n\nReferenceError: main is not defined\n    at Socket.<anonymous> (/tmp/submission/20200402/22/02/hackerrank-52ae9cfae8a6e38b352afc3268fec0de/code/Solution.js:4:5)\n    at Socket.emit (events.js:198:13)\n    at addChunk (_stream_readable.js:288:12)\n    at readableAddChunk (_stream_readable.js:269:11)\n    at Socket.Readable.push (_stream_readable.js:224:10)\n    at Pipe.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)\n")),Object(i.b)("p",null,Object(i.b)("img",Object(n.a)({parentName:"p"},{src:"https://s3.amazonaws.com/hr-assets/0/1516119799-559ef4eb7c-js10_topic_strings.png",alt:"image"}))),Object(i.b)("h2",{id:"stringconcat"},Object(i.b)("inlineCode",{parentName:"h2"},"String.concat()")),Object(i.b)("p",null,"Returns a new string consisting of the calling string concatenated with another string passed as an argument. For example:"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'var s = "Hacker";\nvar t = "Rank";\nvar u = s.concat(t);\nconsole.log(s + " " + t);\nconsole.log(u);\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nHacker Rank\nHackerRank\n")),Object(i.b)("h2",{id:"stringincludes"},Object(i.b)("inlineCode",{parentName:"h2"},"String.includes()")),Object(i.b)("p",null,"Returns a boolean denoting whether a string passed as an argument exists within the calling string. For example:"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'var s = "HackerRank"; \nconsole.log(s.includes() + " " + s.includes(""));\nconsole.log(s.includes("hack") + " " + s.includes("Hack"));\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nfalse true\nfalse true\n")),Object(i.b)("h2",{id:"stringendswith"},Object(i.b)("inlineCode",{parentName:"h2"},"String.endsWith()")),Object(i.b)("p",null,"Returns a boolean denoting whether the calling string ends with the characters of another string passed as an argument. For example:"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'var s = "HackerRank"; \nconsole.log(s.endsWith() + " " + s.endsWith(""));\nconsole.log(s.endsWith("rank") + " " + s.endsWith("Rank"));\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nfalse true\nfalse true\n")),Object(i.b)("h2",{id:"stringindexof"},Object(i.b)("inlineCode",{parentName:"h2"},"String.indexOf()")),Object(i.b)("p",null,"Returns an integer denoting the index within the calling String object of the ",Object(i.b)("em",{parentName:"p"},"first")," occurrence of the given argument:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"If the argument isn't found in the string or no argument was passed to the function, it returns ",Object(i.b)("inlineCode",{parentName:"li"},"-1"),"."),Object(i.b)("li",{parentName:"ul"},"If an integer is passed as a second argument, it will start searching the string from the index denoted by the integer.")),Object(i.b)("p",null,"For example:"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'var s = "HackerRank";\nconsole.log(\n    s.indexOf("a") + " " \n    + s.indexOf("a", s.length) + " " \n    + s.indexOf("a", 6)\n);\nconsole.log(\n    s.indexOf("an") + " " \n    + s.indexOf("x") + " " \n    + s.indexOf("")\n);\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n1 -1 7\n7 -1 0\n")),Object(i.b)("h2",{id:"stringlastindexof"},Object(i.b)("inlineCode",{parentName:"h2"},"String.lastIndexOf()")),Object(i.b)("p",null,"Returns an integer denoting the index within the calling String object of the ",Object(i.b)("em",{parentName:"p"},"last")," occurrence of the given argument:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"If the argument isn't found in the string or no argument was passed to the function, it returns ",Object(i.b)("inlineCode",{parentName:"li"},"-1"),"."),Object(i.b)("li",{parentName:"ul"},"If an integer is passed as a second argument, it will search the string backward starting from the index denoted by the integer.")),Object(i.b)("p",null,"For example:"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'var s = "HackerRank";\nconsole.log(\n    s.lastIndexOf("a") + " " \n    + s.lastIndexOf("a", s.length) + " " \n    + s.lastIndexOf("a", 6)\n);\nconsole.log(\n    s.lastIndexOf("ac") + " " \n    + s.lastIndexOf("x") + " " \n    + s.lastIndexOf("")\n);\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n7 7 1\n1 -1 10\n")),Object(i.b)("h2",{id:"stringmatch"},Object(i.b)("inlineCode",{parentName:"h2"},"String.match()")),Object(i.b)("p",null,"Match a regular expression passed as an argument against the calling string. If a match is found, it returns an object with three properties: the matched substring, the ",Object(i.b)("inlineCode",{parentName:"p"},"index")," it was found at, and the ",Object(i.b)("inlineCode",{parentName:"p"},"input")," (i.e., the initial string); if no match is found, it returns null. For example:"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'var s = "HackerRank";\nconsole.log(s.match());\nconsole.log(s.match("[a-z]+"));\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n[ '', index: 0, input: 'HackerRank', groups: undefined ]\n[ 'acker', index: 1, input: 'HackerRank', groups: undefined ]\n")),Object(i.b)("h2",{id:"stringnormalize"},Object(i.b)("inlineCode",{parentName:"h2"},"String.normalize()")),Object(i.b)("p",null,"Returns a string containing the Unicode Normalization Form of the calling string's value. The argument must be one of the following:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"NFC"'),": Normalization Form Canonical Composition. This is the default in the event that no argument is given."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"NFD"'),": Normalization Form Canonical Decomposition."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"NFKC"'),": Normalization Form Compatibility Composition."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"NFKD"'),": Normalization Form Compatibility Decomposition.")),Object(i.b)("p",null,"For example:"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'var s = "HackerRank";\nconsole.log(s.normalize());\nconsole.log(s.normalize("NFKC"));\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nHackerRank\nHackerRank\n")),Object(i.b)("h2",{id:"stringrepeat"},Object(i.b)("inlineCode",{parentName:"h2"},"String.repeat()")),Object(i.b)("p",null,"Returns a string consisting of the elements of the calling String object repeated some number of times (given as an integer argument). If no argument or a argument are given, then it returns the empty string. For example:"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'var s = "HackerRank";\nconsole.log(s.repeat () + "x" + s.repeat(0));\nconsole.log(s.repeat(2));\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nx\nHackerRankHackerRank\n")),Object(i.b)("h2",{id:"stringreplace"},Object(i.b)("inlineCode",{parentName:"h2"},"String.replace()")),Object(i.b)("p",null,"Finds a match between a regular expression and a string, then returns a string where the first matched substring is replaced with a new substring. If no match is found, the returned string is the same as the original string. For example:"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'var s = "HackerRank";\nconsole.log(s.replace() + " " + s.replace("a", ""));\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nHackerRank HckerRank\n")),Object(i.b)("h2",{id:"stringsearch"},Object(i.b)("inlineCode",{parentName:"h2"},"String.search()")),Object(i.b)("p",null,"Executes the search for a match between a regular expression and a specified string, then returns the index of the first character of the first match. For example:"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'var s = "HackerRank";\nconsole.log(s.search() + " " + s.search("[a-z]"));\nconsole.log(s.search("a") + " " + s.search("an"));\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n0 1\n1 7\n")),Object(i.b)("h2",{id:"stringslice"},Object(i.b)("inlineCode",{parentName:"h2"},"String.slice()")),Object(i.b)("p",null,"Extracts a section of a string and returns it as a new string. The extracted section depends on the arguments passed to the function:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"If no arguments are passed to the function, it returns the entire string."),Object(i.b)("li",{parentName:"ul"},"If one integer argument, $i$, is passed to the function, it returns a substring starting at index $i$ and ending at the end of the string."),Object(i.b)("li",{parentName:"ul"},"If two integer arguments, $i$ and $j$ , are passed to the function, it returns a substring consisting of characters in the range $[i,j)$; in other words, this is a substring starting at index $i$ and ending at $j -1$ . For example:")),Object(i.b)("p",null,"If one (or both) of the arguments passed to this function is negative, then the index corresponding to that argument is calculated as ",Object(i.b)("inlineCode",{parentName:"p"},"String.length")," minus the given argument. For example:"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'var s = "HackerRank";\nconsole.log(s.slice(0, 6) + " " + s.slice(6));\nconsole.log(\n    s.slice() + " " \n    + s.slice(-4, 8) + " " \n    + s.slice(-4, -2)\n);\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nHacker Rank\nHackerRank Ra Ra\n")),Object(i.b)("h2",{id:"stringsplit"},Object(i.b)("inlineCode",{parentName:"h2"},"String.split()")),Object(i.b)("p",null,"Splits a String object into an array of strings by separating the string into substrings:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"If no argument is given, it returns an array containing the original string."),Object(i.b)("li",{parentName:"ul"},"If the empty string is passed as an argument, it returns an array of the string's individual letters."),Object(i.b)("li",{parentName:"ul"},"If a string consisting of one or more letters is passed as an argument, it splits the string at each occurrence of that string and returns an array of the split substrings.")),Object(i.b)("p",null,"For example:"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'var s = "HackerRank";\nconsole.log(s.split(""));\nconsole.log(s.split("k"));\nconsole.log(s.split());\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n[ 'H', 'a', 'c', 'k', 'e', 'r', 'R', 'a', 'n', 'k' ]\n[ 'Hac', 'erRan', '' ]\n[ 'HackerRank' ]\n")),Object(i.b)("h2",{id:"stringstartswith"},Object(i.b)("inlineCode",{parentName:"h2"},"String.startsWith()")),Object(i.b)("p",null,"Returns a boolean denoting whether a string begins with the characters of another string passed as an argument. For example:"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'var s = "HackerRank";\nconsole.log(s.startsWith("Hack"));\nconsole.log(s.startsWith("Hacks"));\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\ntrue\nfalse\n")),Object(i.b)("h2",{id:"stringsubstr"},Object(i.b)("inlineCode",{parentName:"h2"},"String.substr()")),Object(i.b)("p",null,"Returns a substring consisting of characters in a given range, depending on the arguments passed to the function:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"If no arguments are passed to the function, it returns the entire string."),Object(i.b)("li",{parentName:"ul"},"If one integer argument, $i$, is passed to the function, it returns a substring starting at index $i$ and ending at the end of the string."),Object(i.b)("li",{parentName:"ul"},"If two integer arguments, $i$ and $j$ , are passed to the function, it returns a substring consisting of characters in the range $[i,j)$; in other words, this is a substring starting at index and ending at $j-1$.")),Object(i.b)("p",null,"For example:"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'var s = "HackerRank";\nconsole.log(s.substr());\nconsole.log(s.substr(0, 6) + " " + s.substr(6));\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nHackerRank\nHacker Rank\n")),Object(i.b)("h2",{id:"stringsubstring"},Object(i.b)("inlineCode",{parentName:"h2"},"String.substring()")),Object(i.b)("p",null,"Returns a substring consisting of characters in a given range, depending on the arguments passed to the function:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"If no arguments are passed to the function, it returns the entire string."),Object(i.b)("li",{parentName:"ul"},"If one integer argument, , is passed to the function, it returns a substring starting at index and ending at the end of the string."),Object(i.b)("li",{parentName:"ul"},"If two integer arguments, and , are passed to the function, it returns a substring consisting of characters in the range ; in other words, this is a substring starting at index and ending at .")),Object(i.b)("p",null,"For example:"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'var s = "HackerRank";\nconsole.log(s.substring());\nconsole.log(s.substring(0, 6) + " " + s.substring(6));\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nHackerRank\nHacker Rank\n")),Object(i.b)("h2",{id:"stringtolowercase"},Object(i.b)("inlineCode",{parentName:"h2"},"String.toLowerCase()")),Object(i.b)("p",null,"Returns the calling string's value, converted to lowercase letters. For example:"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'var s = "HackerRank";\ns = s.toLowerCase();\nconsole.log(s);\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nhackerrank\n")),Object(i.b)("h2",{id:"stringtouppercase"},Object(i.b)("inlineCode",{parentName:"h2"},"String.toUpperCase()")),Object(i.b)("p",null,"Returns the calling string's value, converted to uppercase letters. For example:"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'var s = "HackerRank";\ns = s.toUpperCase();\nconsole.log(s);\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nHACKERRANK\n")),Object(i.b)("h2",{id:"stringtrim"},Object(i.b)("inlineCode",{parentName:"h2"},"String.trim()")),Object(i.b)("p",null,"Returns the string with the whitespace trimmed from its beginning and end. This is part of the ",Object(i.b)("em",{parentName:"p"},"ECMAScript 5")," standard. For example:"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'var s = "    HackerRank    ";\nconsole.log("Original Length: " + s.length);\ns = s.trim();\nconsole.log("Trimmed Length: " + s.length);\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nOriginal Length: 18\nTrimmed Length: 10\n")),Object(i.b)("h2",{id:"stringtrimleft"},Object(i.b)("inlineCode",{parentName:"h2"},"String.trimLeft()")),Object(i.b)("p",null,"Returns the string with the whitespace trimmed from its left side. For example:"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'var s = "    HackerRank    ";\nconsole.log("Original Length: " + s.length);\ns = s.trimLeft();\nconsole.log("Trimmed Length: " + s.length);\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nOriginal Length: 18\nTrimmed Length: 14\n")),Object(i.b)("h2",{id:"stringtrimright"},Object(i.b)("inlineCode",{parentName:"h2"},"String.trimRight()")),Object(i.b)("p",null,"Returns the string with the whitespace trimmed from its right side. For example:"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'var s = "    HackerRank    ";\nconsole.log("Original Length: " + s.length);\ns = s.trimRight();\nconsole.log("Trimmed Length: " + s.length);\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nOriginal Length: 18\nTrimmed Length: 14\n")),Object(i.b)("h1",{id:"loops"},"Loops"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Loops")," are a quick and easy way to repeatedly perform a series of instructions, and they are typically run a finite number of times. JavaScript has the following types of loops:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"for")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"while")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"do-while")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"for-in")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"for-of"))),Object(i.b)("h2",{id:"for"},Object(i.b)("em",{parentName:"h2"},"for")),Object(i.b)("p",null,"The ",Object(i.b)("em",{parentName:"p"},"for")," statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by one or more statements that will be executed in the loop."),Object(i.b)("h3",{id:"basic-syntax"},"Basic Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"for (initialization; condition; finalExpression) {\n    statement(s);\n}\n")),Object(i.b)("h3",{id:"components"},"Components"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"$initialization$ : An expression or variable declaration that is typically used to initialize a counter variable."),Object(i.b)("li",{parentName:"ul"},"$condition$ : This is the ",Object(i.b)("em",{parentName:"li"},"termination condition"),", which is an expression that's evaluated before each pass through the loop. If this expression evaluates to ",Object(i.b)("em",{parentName:"li"},"true"),", then $statement$ is executed. If the expression evaluates to ",Object(i.b)("em",{parentName:"li"},"false"),", execution jumps to the first line of code after the end of the loop. If this statement is omitted, then $condition $ always evaluates to ",Object(i.b)("em",{parentName:"li"},"true"),"."),Object(i.b)("li",{parentName:"ul"},"$finalExpression$ : An expression to be evaluated at the end of each loop iteration. This occurs before the next evaluation of $condition $."),Object(i.b)("li",{parentName:"ul"},"$statement $ : The statement (or statements) that is executed each time $ condition$ evaluates to ",Object(i.b)("em",{parentName:"li"},"true"),".")),Object(i.b)("p",null,"It's important to note that:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The $initialization$, $condition$, $finalExpression$ and in the head of the ",Object(i.b)("em",{parentName:"li"},"for")," loop are ",Object(i.b)("em",{parentName:"li"},"optional"),", but are generally always used."),Object(i.b)("li",{parentName:"ul"},"The head of a for loop typically looks like ",Object(i.b)("inlineCode",{parentName:"li"},"for (var i = 0; i < maxValue; i++)"),", where $maxValue$ is the maximum value you wish to iterate until.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"example")," "),Object(i.b)("p",null,"Print all the integers in the range from to some number given as input."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'function main(input) {\n    for (var i = 1; i <= input; i++) {\n        process.stdout.write(i + " ");\n    }\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Input\n10\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n1 2 3 4 5 6 7 8 9 10\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Initialize")," "),Object(i.b)("p",null,"In this example, we omit the $initialization $ expression and instead initialize the variable used in $ condition $ and $finalExpression $ before our loop:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'function main(input) {\n    var i = 1;\n\n    for (; i <= input; i++) {\n        process.stdout.write(i + " ");\n    }\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Input\n10\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n1 2 3 4 5 6 7 8 9 10 \n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Condition")),Object(i.b)("p",null,"In this example, we omit the $ condition $ expression and instead add an ",Object(i.b)("em",{parentName:"p"},"if")," statement inside the loop that terminates the loop once a the condition ",Object(i.b)("inlineCode",{parentName:"p"},"i > input")," is satisfied:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'function main(input) {\n\n    for (var i = 1;; i++) {\n        if (i > input) {\n            break;\n        }\n\n        process.stdout.write(i + " ");\n    }\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Input\n10\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n1 2 3 4 5 6 7 8 9 10 \n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Inifinite Loop")," "),Object(i.b)("p",null,"If we omit all three blocks, our loop will run infinitely or until such a time as we call ",Object(i.b)("inlineCode",{parentName:"p"},"break;")," from inside the loop. In this example, we do just that:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'function main(input) {\n    var i = 1;\n\n    for (;;) {\n        if (i > input) {\n            break;\n        }\n\n        process.stdout.write(i + " ");\n        i++;\n    }\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Input\n10\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n1 2 3 4 5 6 7 8 9 10 \n")),Object(i.b)("h2",{id:"while"},Object(i.b)("em",{parentName:"h2"},"while")),Object(i.b)("p",null,"The ",Object(i.b)("em",{parentName:"p"},"while")," statement creates a loop that executes its internal statement(s) as long as the specified $ condition  $ evaluates to ",Object(i.b)("em",{parentName:"p"},"true"),". The condition is evaluated before executing the statement."),Object(i.b)("h3",{id:"basic-syntax-1"},"Basic Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"while (condition) {\n    statement(s);\n}\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"$condition $: This is the ",Object(i.b)("em",{parentName:"li"},"termination condition"),", which is an expression that's evaluated before each pass through the loop. If this expression evaluates to ",Object(i.b)("em",{parentName:"li"},"true"),", then $statement$ is executed; if it evaluates to ",Object(i.b)("em",{parentName:"li"},"false"),", execution jumps to the first line of code after the end of the loop."),Object(i.b)("li",{parentName:"ul"},"$ statement $: The statement (or statements) that is executed each time $condition$ evaluates to ",Object(i.b)("em",{parentName:"li"},"true"),".")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")," "),Object(i.b)("p",null,"Print all the integers from $1$ to $10$ ."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'function main(input) {\n    var i = 1;\n\n    while (i <= input) {\n        process.stdout.write(i + " ");\n\n        i++;\n    }\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Input\n10\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n1 2 3 4 5 6 7 8 9 10 \n")),Object(i.b)("h2",{id:"do-while"},Object(i.b)("em",{parentName:"h2"},"do-while")),Object(i.b)("p",null,"The ",Object(i.b)("em",{parentName:"p"},"do-while")," statement creates a loop that executes its internal statement(s) until the specified $condition $ evaluates to false. The condition is evaluated after executing the internal statement(s), so the contents of the loop always execute ",Object(i.b)("em",{parentName:"p"},"at least")," once."),Object(i.b)("h3",{id:"basic-syntax-2"},"Basic Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"do {\n    statement(s);\n} while (condition);\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"$condition$: This is the ",Object(i.b)("em",{parentName:"li"},"termination condition"),", and it's evaluated ",Object(i.b)("em",{parentName:"li"},"after")," each pass through the loop (meaning the loop will always run at least once). Once the statement(s) inside the loop is executed, $condition$ is evaluated. If this expression evaluates to ",Object(i.b)("em",{parentName:"li"},"true"),", then $statement$ is executed again; if it evaluates to ",Object(i.b)("em",{parentName:"li"},"false"),", execution jumps to the first line of code after the end of the loop."),Object(i.b)("li",{parentName:"ul"},"$statement$ : The statement (or statements) that is executed each time $condition$ evaluates to ",Object(i.b)("em",{parentName:"li"},"true"),".")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")," "),Object(i.b)("p",null,"Print all the integers in the range from $1$ to some number given as input."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'function main(input) {\n    var i = 1;\n\n    do {\n        process.stdout.write(i + " ");\n\n        i++;\n    } while (i <= input);\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Input\n10\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n1 2 3 4 5 6 7 8 9 10 \n")),Object(i.b)("h2",{id:"for-in"},Object(i.b)("em",{parentName:"h2"},"for-in")),Object(i.b)("p",null,"This loop iterates (in an arbitrary order) over the ",Object(i.b)("em",{parentName:"p"},"name")," of each enumerable property in an object, allowing statements to be executed for each distinct property."),Object(i.b)("h3",{id:"basic-syntax-3"},"Basic Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"for (var variable in object) {\n    // insert code that uses variable here\n}\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"$variable$ : A variable that refers to a different property ",Object(i.b)("em",{parentName:"li"},"name")," during each iteration of the loop. You can declare this with ",Object(i.b)("inlineCode",{parentName:"li"},"var")," or ",Object(i.b)("inlineCode",{parentName:"li"},"let"),"."),Object(i.b)("li",{parentName:"ul"},"$object$ : The object whose enumerable properties are being iterated through.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")," "),Object(i.b)("p",null,"In the code below, we create an object (referenced by the $actress$ variable) and iterate over its enumerable properties:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'var actress = {\n    firstName: "Julia",\n    lastName: "Roberts",\n    dateOfBirth: "October 28, 1967",\n    nationality: "American",\n    firstMovie: "Satisfaction"\n};\n\nfor (var property in actress) {\n    console.log("actress." + property + " = " + actress[property]);\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nactress.firstName = Julia\nactress.lastName = Roberts\nactress.dateOfBirth = October 28, 1967\nactress.nationality = American\nactress.firstMovie = Satisfaction\n")),Object(i.b)("p",null,"In this code, we create a ",Object(i.b)("em",{parentName:"p"},"Monster")," object named $monster$ , then print the object followed by its individual properties."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Input Format")," "),Object(i.b)("p",null,"The first line contains a string, $name$ , denoting the type of monster.\nThe second line contains a string, $home$, denoting the location where the monster lives.\nThe third line contains a string, $description$, describing the monster."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'class Monster {\n    constructor(name, home, description) {\n        this.name = name;\n        this.home = home;\n        this.description = description;\n    }\n}\n\nfunction main(input) {\n    var monster = new Monster(input[0], input[1], input[2]);\n\n    // Print array\n    console.log(monster);\n\n    // Print each of its elements on a new line\n    for (let property in monster) {\n        console.log(property + ": " + monster[property]);\n    }\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Input\nMinotaur\nLabyrinth\nBull head, man body.\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nMonster {\n  name: 'Minotaur',\n  home: 'Labyrinth',\n  description: 'Bull head, man body.' }\nname: Minotaur\nhome: Labyrinth\ndescription: Bull head, man body.\n")),Object(i.b)("h2",{id:"for-of"},Object(i.b)("em",{parentName:"h2"},"for-of")),Object(i.b)("p",null,"This loop iterates over iterable objects such as an ",Object(i.b)("em",{parentName:"p"},"Array"),", ",Object(i.b)("em",{parentName:"p"},"Map"),", ",Object(i.b)("em",{parentName:"p"},"Set"),", ",Object(i.b)("em",{parentName:"p"},"String"),", ",Object(i.b)("em",{parentName:"p"},"TypedArray"),", ",Object(i.b)("em",{parentName:"p"},"arguments object"),", etc. It essentially iterates over the ",Object(i.b)("em",{parentName:"p"},"value")," of each distinct property in the structure, such as each letter in a word or each element in an array."),Object(i.b)("h3",{id:"basic-syntax-4"},"Basic Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"for (let variable of iterable) {\n    statement(s);\n}\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"$variable$: A variable that refers to a different property ",Object(i.b)("em",{parentName:"li"},"value")," during each iteration of the loop. You can declare this with ",Object(i.b)("inlineCode",{parentName:"li"},"var")," or ",Object(i.b)("inlineCode",{parentName:"li"},"let"),"."),Object(i.b)("li",{parentName:"ul"},"$object$ : The object whose enumerable properties are being iterated through.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")," "),Object(i.b)("p",null,"The code below splits the input into an array and prints it. It then iterates over each element of the array and prints it on a new line."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Input Format")),Object(i.b)("p",null,"Space and/or newline-separated words."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'function main(input) {\n    // Split the words read as input into an array of words\n    var array = input.split(new RegExp("[ \\n]+"));\n\n    // Print array\n    console.log(array);\n\n    // Print each of its elements on a new line\n    for (let value of array) {\n        console.log(value);\n    }\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Input\nhi bye \nhello goodbye\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n[ 'hi', 'bye', 'hello', 'goodbye' ]\nhi\nbye\nhello\ngoodbye\n")),Object(i.b)("hr",null),Object(i.b)("p",null,"In this code, we iterate over the set of ",Object(i.b)("em",{parentName:"p"},"Key-Value")," pairs in a ",Object(i.b)("em",{parentName:"p"},"Map"),", first printing each ",Object(i.b)("em",{parentName:"p"},"Key-Value")," pair and then printing each individual ",Object(i.b)("em",{parentName:"p"},"Key")," and its paired ",Object(i.b)("em",{parentName:"p"},"Value"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'let actress = new Map([\n    ["firstName", "Julia"],\n    ["lastName", "Roberts"],\n    ["dateOfBirth", "October 28, 1967"],\n    ["nationality", "American"],\n    ["firstMovie", "Satisfaction"]\n]);\n\n// Print each Key-Value pair in the map\nfor (let info of actress) {\n    console.log(info);\n}\n\n// Print each Key and Value as "Key: Value"\nconsole.log();\nfor (let info of actress) {\n    console.log(info[0] + ": " + info[1]);\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n[ 'firstName', 'Julia' ]\n[ 'lastName', 'Roberts' ]\n[ 'dateOfBirth', 'October 28, 1967' ]\n[ 'nationality', 'American' ]\n[ 'firstMovie', 'Satisfaction' ]\n\nfirstName: Julia\nlastName: Roberts\ndateOfBirth: October 28, 1967\nnationality: American\nfirstMovie: Satisfaction\n")),Object(i.b)("h1",{id:"arrays"},"Arrays"),Object(i.b)("p",null,"This is a data structure that stores elements of the same type (generally). It's important to note that you'll often see arrays referred to as $A$ in documentation, but the variable names you use when coding should be descriptive and begin with ",Object(i.b)("em",{parentName:"p"},"lowercase")," letters."),Object(i.b)("p",null,"You can think of an array, $A$, of size $n$ as a contiguous block of cells sequentially indexed from $0$ to $n - 1$ which serve as containers for elements of the array's declared data type. The length, $n$, of the array is ",Object(i.b)("em",{parentName:"p"},"fixed"),", meaning it cannot be resized without creating a new array. To store an element, $value$, in some index $i$ of array $A$, use the syntax ",Object(i.b)("inlineCode",{parentName:"p"},"A[i]")," and treat it as you would any other variable (i.e., ",Object(i.b)("inlineCode",{parentName:"p"},"A[i] = value;"),"). An element of an array can be accessed in constant time. For example, the following code:"),Object(i.b)("p",null,"The JavaScript Array object is a global object that is used in the construction of arrays; which are high-level, list-like objects. "),Object(i.b)("h3",{id:"example-java"},"Example (Java)"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'// the number of elements we want to hold\nfinal int _arraySize = 4; \n\n// our array declaration\nString[] stringArray = new String[_arraySize]; \n\nfor(int i = 0; i < _arraySize; i++) {\n    // assign value to index i\n    stringArray[i] = "This is stored in index " + i; \n    \n    // print value saved in index i\n    System.out.println(stringArray[i]); \n}\n')),Object(i.b)("p",null,"saves and then prints the values listed below in their respective indices of :"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"This is stored in index 0\nThis is stored in index 1\nThis is stored in index 2\nThis is stored in index 3\n")),Object(i.b)("p",null,"Most languages also have a ",Object(i.b)("em",{parentName:"p"},"method"),", ",Object(i.b)("em",{parentName:"p"},"attribute"),", or ",Object(i.b)("em",{parentName:"p"},"member")," that allows you to retrieve the size of an array. In Java, arrays have a $Length$ attribute; in other words, you can get the length of some array, ",Object(i.b)("inlineCode",{parentName:"p"},"arrayName"),", by using the ",Object(i.b)("inlineCode",{parentName:"p"},"arrayName.length")," syntax."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Note:")," The ",Object(i.b)("em",{parentName:"p"},"final")," keyword used in the code above is a means of protecting the variable's value by locking it to its initialized value. Any attempt to reassign (overwrite) the value of a ",Object(i.b)("em",{parentName:"p"},"final")," variable will generate an error."),Object(i.b)("h2",{id:"1-create-an-array"},"1. Create an Array"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"var a = ['first', 'second'];\n\nconsole.log('a\\'s contents:', a);\nconsole.log('a\\'s length:', a.length);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\na's contents: [ 'first', 'second' ]\na's length: 2\n")),Object(i.b)("h2",{id:"2-access-index-into-an-array-item"},"2. Access (Index Into) an Array Item"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"let a = ['first', 'second'];\n\n// first = 'first'\nlet first = a[0]; \n\n// last = 'second'\nlet last = a[a.length - 1]; \n\nconsole.log('a[0]:', first);\nconsole.log('a[a.length - 1]:', last);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\na[0]: first\na[a.length - 1]: second\n")),Object(i.b)("h2",{id:"3-loop-over-an-array"},"3. Loop Over an Array"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"var a = ['first', 'second'];\n\na.forEach(function(e, i, array) {\n    // 'i' is the index\n    // 'e' is the element\n    console.log(i + ' ' + e);\n});\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n0 first\n1 second\n")),Object(i.b)("h2",{id:"4-append-to-the-end-of-an-array"},"4. Append to the End of an Array"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"var a = ['first', 'second'];\n\n// Append 'third' to array 'a'\na.push('third');\n\nconsole.log('a:', a);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\na: [ 'first', 'second', 'third' ]\n")),Object(i.b)("h2",{id:"5-remove-from-the-end-of-an-array"},"5. Remove From the end of an Array"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"var a = ['first', 'second', 'third'];\nconsole.log('Original Array:', a);\n\n// Remove the last element from the array\nlet removed = a.pop();\n\nconsole.log('Modified Array:', a);\nconsole.log('Removed Element:', removed);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nOriginal Array: [ 'first', 'second', 'third' ]\nModified Array: [ 'first', 'second' ]\nRemoved Element: third\n")),Object(i.b)("h2",{id:"6-remove-from-the-front-of-an-array"},"6. Remove From the Front of an Array"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"var a = ['first', 'second', 'third'];\nconsole.log('Original Array:', a);\n\n// Remove the first element from the array\nlet removed = a.shift();\n\nconsole.log('Modified Array:', a);\nconsole.log('Removed Element:', removed);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nOriginal Array: [ 'first', 'second', 'third' ]\nModified Array: [ 'second', 'third' ]\nRemoved Element: first\n")),Object(i.b)("h2",{id:"7-add-to-the-front-of-an-array"},"7. Add to the Front of an Array"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"var a = ['first', 'second', 'third'];\nconsole.log('Original Array:', a);\n\n// Insert element at the beginning of the array\na.unshift('fourth');\n\nconsole.log('Modified Array:', a);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nOriginal Array: [ 'first', 'second', 'third' ]\nModified Array: [ 'fourth', 'first', 'second', 'third' ]\n")),Object(i.b)("h2",{id:"8-find-the-index-of-an-item-in-the-array"},"8. Find the Index of an Item in the Array"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"var a = ['first', 'second', 'third', 'fourth'];\n\nlet position = a.indexOf('second');\n\nconsole.log('a:', a);\nconsole.log('position:', position);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\na: [ 'first', 'second', 'third', 'fourth' ]\nposition: 1\n")),Object(i.b)("h2",{id:"9-remove-an-item-by-index-position"},"9. Remove an Item by Index Position"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"var a = ['first', 'second', 'third', 'fourth', 'fifth'];\nconsole.log('Original Array:', a);\n\nlet position = 1;\nlet elementsToRemove = 2;\n// Remove 'elementsToRemove' element(s) starting at 'position'\na.splice(position, elementsToRemove);\n\nconsole.log('Modified Array:', a);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nOriginal Array: [ 'first', 'second', 'third', 'fourth', 'fifth' ]\nModified Array: [ 'first', 'fourth', 'fifth' ]\n")),Object(i.b)("h2",{id:"10-copy-an-array"},"10. Copy an Array"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"var a = ['first', 'second', 'third', 'fourth'];\nconsole.log('a:', a);\n\n// Shallow copy array 'a' into a new object\nlet b = a.slice();\n\nconsole.log('b:', b);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\na: [ 'first', 'second', 'third', 'fourth' ]\nb: [ 'first', 'second', 'third', 'fourth' ]\n")),Object(i.b)("h2",{id:"11-sort-an-array"},"11. Sort an Array"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"var a = ['c', 'a', 'd', 'b', 'aa'];\nvar b = [9, 2, 13, 7, 1, 12, 123];\n\n// Sort in ascending lexicographical order using a built-in\na.sort();\nb.sort();\n\nconsole.log('a:', a);\nconsole.log('b:', b);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\na: [ 'a', 'aa', 'b', 'c', 'd' ]\nb: [ 1, 12, 123, 13, 2, 7, 9 ]\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"var a = ['c', 'a', 'd', 'b', 'aa'];\nvar b = [9, 2, 13, 7, 1, 12, 123];\n\n// Sort in descending lexicographical order using a compare function\na.sort(function(x, y) { return x < y; } );\nb.sort(function(x, y) { return x < y; } );\n\nconsole.log('a:', a);\nconsole.log('b:', b);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\na: [ 'd', 'c', 'b', 'aa', 'a' ]\nb: [ 123, 13, 12, 9, 7, 2, 1 ]\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"var a = ['c', 'a', 'd', 'b', 'aa'];\n\n// Sort in descending lexicographical order using a compare arrow function\na.sort((x, y) => x < y);\n\nconsole.log('a:', a);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\na: [ 'd', 'c', 'b', 'aa', 'a' ]\n")),Object(i.b)("h2",{id:"12-iterate-over-an-array"},"12. Iterate Over an Array"),Object(i.b)("p",null,"We can use the ",Object(i.b)("em",{parentName:"p"},"for\u2026of")," statement to iterate over an array. This type of statement creates a loop that lets you iterate over iterable objects such as ",Object(i.b)("em",{parentName:"p"},"Array"),", ",Object(i.b)("em",{parentName:"p"},"String"),", ",Object(i.b)("em",{parentName:"p"},"Set"),", and ",Object(i.b)("em",{parentName:"p"},"Map"),"."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"var a = ['first', 'second', 'third', 'fourth'];\n\nfor (let e of a) {\n    console.log('e:', e);\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\ne: first\ne: second\ne: third\ne: fourth\n")),Object(i.b)("h1",{id:"error-handling"},"Error Handling"),Object(i.b)("h2",{id:"javascript-errors"},"JavaScript Errors"),Object(i.b)("p",null,"There are three types of errors in programming:"),Object(i.b)("h3",{id:"1-syntax-error-parsing-error"},"1. Syntax Error (Parsing Error)"),Object(i.b)("p",null,"In a traditional programming language, this type of error occurs at ",Object(i.b)("em",{parentName:"p"},"compile time"),"; because JavaScript is an ",Object(i.b)("em",{parentName:"p"},"interpreted")," language, this type of error arises when the code is interpreted. When a syntax error occurs in JavaScript, only the code contained within the same ",Object(i.b)("em",{parentName:"p"},"thread")," as the syntax error is affected; independent code running in other threads will still be executed, as nothing in them depends on the code containing the error. For example, consider the following code containing a syntax error:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'console.log("Hello" \n')),Object(i.b)("p",null,"This produces the following error: ",Object(i.b)("inlineCode",{parentName:"p"},"SyntaxError: missing ) after argument list"),". This is because we failed to add a closing parenthesis to our call to ",Object(i.b)("em",{parentName:"p"},"console.log"),"."),Object(i.b)("h3",{id:"2-runtime-error-exception"},"2. Runtime Error (Exception)"),Object(i.b)("p",null,"Commonly referred to as ",Object(i.b)("em",{parentName:"p"},"exceptions"),", this type of error occurs during execution (i.e., after compilation or interpretation). Once a runtime error is encountered, an exception is ",Object(i.b)("em",{parentName:"p"},"thrown")," in the hope that it will be ",Object(i.b)("em",{parentName:"p"},"caught")," by a subsequent section of code containing instructions on how to recover from the error. Much like syntax errors, these affect the thread where they occured but allow other, independent threads to continue normal execution. For example, consider the following code containing a runtime error:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"function sum(a, b) {}\nadd(2, 3) \n")),Object(i.b)("p",null,"This produces the following error: ",Object(i.b)("inlineCode",{parentName:"p"},"ReferenceError: add is not defined"),". This is because we attempted to call the ",Object(i.b)("em",{parentName:"p"},"add")," function without ever declaring and defining it."),Object(i.b)("h3",{id:"3-logical-error"},"3. Logical Error"),Object(i.b)("p",null,"These are some of the most difficult errors to isolate because they cause the program to operate without terminating or crashing, but the operations the code performs are not correct. Unlike syntax and runtime errors which arise due to some violation of the rules of the language, these errors occur when there is a mistake in your the code's logic."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("p",null,"Click ",Object(i.b)("em",{parentName:"p"},"Run")," below to see this in code for a program that prints the ",Object(i.b)("em",{parentName:"p"},"sum")," of two integers. Can you spot the logical error?"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Input Format")),Object(i.b)("p",null,"The first line must contain an integer denoting .\nThe second line must contain an integer denoting ."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"function sum(a, b) {\n    return a - b;\n}\n\nfunction main() {\n    var a = +(readLine());\n    var b = +(readLine());\n\n    console.log( sum(a, b) );\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Input\n2\n3\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n-1\n")),Object(i.b)("h3",{id:"solution-2"},"Solution"),Object(i.b)("p",null,"In the code above, we're reading two integers from stdin and passing them to our ",Object(i.b)("em",{parentName:"p"},"sum")," function. We expect the function to return the sum of two integers, $a$ and $b$ ; however, due to a logical error (used the ",Object(i.b)("inlineCode",{parentName:"p"},"-")," operator instead of the ",Object(i.b)("inlineCode",{parentName:"p"},"+")," operator), it's actually returning the ",Object(i.b)("em",{parentName:"p"},"difference")," between $a$ and $b$ . This program is functional in that it runs, but it is broken in that it does not properly calculate the sum of two integers."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Tip:")," When trying to isolate logical errors in code, it's often helpful to print the contents of your variables to ",Object(i.b)("em",{parentName:"p"},"stderr")," (",Object(i.b)("em",{parentName:"p"},"standard error"),") at various stages in the logic using ",Object(i.b)("inlineCode",{parentName:"p"},"console.warn()")," or ",Object(i.b)("inlineCode",{parentName:"p"},"console.error()"),". For example, if we used this version of the ",Object(i.b)("em",{parentName:"p"},"sum")," function instead:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'function sum(a, b) {\n    var result = a - b;\n    console.error("The sum of " + a + " and " + b + " is " + result);\n    return result;\n}\n')),Object(i.b)("p",null,"The following line would be printed to our error console during execution: ",Object(i.b)("inlineCode",{parentName:"p"},"The sum of 2 and 3 is -1"),". This makes it obvious during debugging that there is a logical issue with how our function calculates the sum of $a$ and $b$ ."),Object(i.b)("h2",{id:"try-catch-and-finally"},"Try, Catch, and Finally"),Object(i.b)("p",null,"The ",Object(i.b)("em",{parentName:"p"},"try")," block is the first step in error handling and is used for any block of code that is likely to raise an exception. It should contain one or more statements to be executed and is typically followed by at least one ",Object(i.b)("em",{parentName:"p"},"catch clause")," and/or the optional ",Object(i.b)("em",{parentName:"p"},"finally clause"),". In other words, the ",Object(i.b)("em",{parentName:"p"},"try")," statement has three forms:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"try-catch")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"try-finally")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"try-catch-finally"))),Object(i.b)("p",null,"The ",Object(i.b)("em",{parentName:"p"},"catch")," block immediately follows the ",Object(i.b)("em",{parentName:"p"},"try")," block and is executed only if an exception is thrown when executing the code within the ",Object(i.b)("em",{parentName:"p"},"try")," block. It contains statements specifying how to proceed and recover from the thrown exception; if no exception is thrown when executing the ",Object(i.b)("em",{parentName:"p"},"try")," block, the ",Object(i.b)("em",{parentName:"p"},"catch")," block is skipped. If any statement within the ",Object(i.b)("em",{parentName:"p"},"try")," block (including a function call to code outside of the block) throws an exception, control immediately shifts to the catch clause."),Object(i.b)("p",null,"It's important to note that we always want to avoid throwing an exception. It's best if the contents of the ",Object(i.b)("em",{parentName:"p"},"try")," block execute without issue but, if an exception is unavoidable, control passes to the ",Object(i.b)("em",{parentName:"p"},"catch")," block which should contain instructions that report and/or recover from the exception."),Object(i.b)("p",null,"The ",Object(i.b)("em",{parentName:"p"},"finally")," block is optional. It executes after the ",Object(i.b)("em",{parentName:"p"},"try")," and ",Object(i.b)("em",{parentName:"p"},"catch")," blocks, but before any subsequent statements following these blocks. The ",Object(i.b)("em",{parentName:"p"},"finally")," block always executes, regardless of whether or not an exception was thrown or caught."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example"),"\nIn the code below, the call to ",Object(i.b)("inlineCode",{parentName:"p"},"getElement(arr, 4)")," inside the ",Object(i.b)("em",{parentName:"p"},"try")," block will throw an exception because the code declaring $arr$ was commented out. It's immediately followed by a ",Object(i.b)("em",{parentName:"p"},"catch")," block that catches the exception and prints the ",Object(i.b)("em",{parentName:"p"},"message")," associated with it (",Object(i.b)("inlineCode",{parentName:"p"},"arr is not defined"),"). Because the exception was caught, the program continues executing, printing the next line after the ",Object(i.b)("em",{parentName:"p"},"catch")," block (",Object(i.b)("inlineCode",{parentName:"p"},"The program continued executing!"),")."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'function getElement(arr, pos) {\n    return arr[pos];\n}\n\n\n//let arr = [1, 2, 3, 4, 5];\n\ntry {\n    console.log(getElement(arr, 4));\n} \ncatch (e) {\n    console.log(e.message);\n}\nconsole.log("The program continued executing!");\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"arr is not defined\nThe program continued executing!\n")),Object(i.b)("p",null,"If we remove the ",Object(i.b)("em",{parentName:"p"},"catch")," block and add the ",Object(i.b)("em",{parentName:"p"},"finally")," block shown below, it will instead print ",Object(i.b)("inlineCode",{parentName:"p"},"Finally Block")," and then terminate due to the uncaught exception (",Object(i.b)("inlineCode",{parentName:"p"},"ReferenceError: arr is not defined"),")."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'//let arr = [1, 2, 3, 4, 5];\n\ntry {\n    console.log(getElement(arr, 4));\n} \nfinally {\n    console.log("Finally Block");\n}\nconsole.log("The program continued executing!");\n')),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example"),"\nIn this example, we create a constant variable, $arr$ , that's an array of integers. We then try to reassign the value of $arr$ to a different array of numbers; this throws an exception because the value of a constant cannot be reassigned or re-declared. Click Run below to execute the code."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"const arr = [1, 2, 3, 4, 5];\n\ntry {\n    arr = [4, 2];\n    console.log(arr.sort());\n} \ncatch (e) {\n    console.log(e.message);\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nAssignment to constant variable.\n")),Object(i.b)("p",null,"Let's say we want to make sure that the contents of $arr$ are printed to stdout regardless of whether or not an exception is thrown or caught; we can do this by adding a ",Object(i.b)("em",{parentName:"p"},"finally")," block:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"const arr = [1, 4, 3, 4, 5];\n\ntry {\n    arr = [4, 2];\n    console.log(arr.sort());\n} \ncatch (e) {\n    console.log(e.message);\n} \nfinally {\n    console.log(arr.sort());\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nAssignment to constant variable.\n[ 1, 3, 4, 4, 5 ]\n")),Object(i.b)("h2",{id:"throw"},"Throw"),Object(i.b)("p",null,"We use the ",Object(i.b)("em",{parentName:"p"},"throw")," statement, denoted by the ",Object(i.b)("inlineCode",{parentName:"p"},"throw")," keyword, to throw an exception. There are two ways to do this, shown below."),Object(i.b)("h3",{id:"1-throw-value"},"1. ",Object(i.b)("inlineCode",{parentName:"h3"},"throw value")),Object(i.b)("p",null,"We can throw an exception by following the keyword ",Object(i.b)("inlineCode",{parentName:"p"},"throw")," with some $value$ that we wish to use for the exception being thrown. Click ",Object(i.b)("em",{parentName:"p"},"Run")," below to see this in code."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'function throwString() {\n    // Generate an exception with a String value\n    throw "some exception";\n}\n\nfunction throwFalse() {\n    // Generate an exception with a boolean value of false\n    throw false;\n}\n\nfunction throwNumber() {\n    // Generate an exception with a Number value of -1\n    throw -1;\n}\n\ntry {\n    throwString();\n}\ncatch (e) {\n    console.log(e);\n}\n\ntry {\n    throwFalse();\n}\ncatch (e) {\n    console.log(e);\n}\n\ntry {\n    throwNumber();\n}\ncatch (e) {\n    console.log(e);\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nsome exception\nfalse\n-1\n")),Object(i.b)("h3",{id:"2-throw-new-errorcustomerror"},"2. ",Object(i.b)("inlineCode",{parentName:"h3"},"throw new Error(customError)")),Object(i.b)("p",null,"We can throw an exception by following the keyword ",Object(i.b)("inlineCode",{parentName:"p"},"throw")," with ",Object(i.b)("inlineCode",{parentName:"p"},"new Error(customError)"),", where $customError$ is the value we want for the $message$ property of the exception being thrown. Click ",Object(i.b)("em",{parentName:"p"},"Run")," below to see this in code."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"function throwMyError() {\n    // Generate an exception with a value read from stdin\n    throw new Error(input);\n}\n\nfunction main() {\n    try {\n        throwMyError();\n    }\n    catch (e) {\n        console.log(e.message);\n    }\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Input\nThis is my fancy error.\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nThis is my fancy error.\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("p",null,"In this example, we wrote a simple program that throws an exception if the given integer argument is outside of the bounds of an array. Click ",Object(i.b)("em",{parentName:"p"},"Run")," below to execute the code."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Input Format")),Object(i.b)("p",null,"Three space-separated integers denoting indices in an array."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"/*\n * This function returns the value at index pos (i.e., arr[pos]).\n * \n * If the index 'pos' is outside of the bounds of the array (i.e., value of arr[pos] is 'undefined'), throw errors.\n */\nfunction getValue(arr, pos) {\n    if (pos < 0) {\n        throw new Error(\"Index Underflow: \" + pos);\n    }\n\n    let len = arr.length;\n\n    if (pos >= len) {\n        throw new Error(\"Index Overflow: \" + pos);\n    }\n\n    return arr[pos];\n}\n\nfunction main() {\n    var index;  \n    const arr = [1, 2, 3, 4, 5];\n    try {\n        index = readLine()\n        console.log(getValue(arr, index));\n    } \n    catch (e) {\n        console.log(e.message);\n    }\n\n    try {\n        index = readLine();\n        console.log(getValue(arr, index));\n    } \n    catch (e) {\n        console.log(e.message);\n    }\n\n    try {\n        index = readLine();\n        console.log(getValue(arr, index));\n    } \n    catch (e) {\n        console.log(e.message);\n    }\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Input\n5 2 -3\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nIndex Overflow: 5\n3\nIndex Underflow: -3\n")),Object(i.b)("h1",{id:"objects"},"Objects"),Object(i.b)("h2",{id:"object-basics"},"Object Basics"),Object(i.b)("p",null,"We define the following:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"Object:")," A collection of properties."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"Property:")," An association between a ",Object(i.b)("em",{parentName:"li"},"name")," (i.e., ",Object(i.b)("em",{parentName:"li"},"key"),") and a ",Object(i.b)("em",{parentName:"li"},"value"),". Note that when the value associated with a key is a function, we call the property a ",Object(i.b)("em",{parentName:"li"},"method"),". A property name can be any valid string, or anything that can be converted into a string (including the empty string).")),Object(i.b)("p",null,"An object has properties associated with it, and we explain an object's properties as variables that are part of the object. We can think of an object's properties as a set of regular variables specific to that object that define its characteristics."),Object(i.b)("p",null,"Let's say we have an object named $objectName$ and a property named $propertyName$ . We can access this property in the following ways:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("em",{parentName:"li"},"Dot Notation:")," Call ",Object(i.b)("inlineCode",{parentName:"li"},"objectName.propertyName"),"."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("em",{parentName:"li"},"Bracket Notation:")," Call ",Object(i.b)("inlineCode",{parentName:"li"},"objectName['propertyName']"),". Note that $propertyName$ must be enclosed in string quotes and is ",Object(i.b)("em",{parentName:"li"},"case-sensitive"),". Any property name that's not a valid JavaScript identifier (e.g., starts with a number, contains a space or hyphen, etc.) can only be accessed using bracket notation. This type of notation is also good to use when property names are dynamically determined (i.e., not known until runtime).")),Object(i.b)("p",null,"We can ",Object(i.b)("em",{parentName:"p"},"add a new property to an existing object")," by assigning a value to it using either dot or bracket notation (see the example below)."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"/*\n * Create an object with two properties, 'Name' and 'Age'\n */\nvar actor = {\n    Name: 'Julia Roberts', \n    Age: 36\n};\n\n// Print the object\nconsole.log('The \\'actor\\' object:', actor);\n\n// Access object's properties using bracket notation\nconsole.log('The \\'Name\\' property:', actor['Name']);\nconsole.log('The \\'Age\\' property:', actor['Age']);\n\n// Access object's properties using dot notation\nconsole.log('The \\'Name\\' property:', actor.Name);\nconsole.log('The \\'Age\\' property:', actor.Age);\n\n// Add a new property called 'EyeColor'\nactor.EyeColor = 'Brown';\n\n// Print the object\nconsole.log('The updated \\'actor\\' object:', actor);\n\n// Trying to access undefined property results in 'undefined'\nconsole.log('Attempt to access an undefined property (\\'HairColor\\'):', \n    actor.HairColor);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nThe 'actor' object: { Name: 'Julia Roberts', Age: 36 }\nThe 'Name' property: Julia Roberts\nThe 'Age' property: 36\nThe 'Name' property: Julia Roberts\nThe 'Age' property: 36\nThe updated 'actor' object: { Name: 'Julia Roberts', Age: 36, EyeColor: 'Brown' }\nAttempt to access an undefined property ('HairColor'): undefined\n")),Object(i.b)("h2",{id:"creating-objects"},"Creating Objects"),Object(i.b)("p",null,"We can create objects using an ",Object(i.b)("em",{parentName:"p"},"object initializer"),", or we can first create a ",Object(i.b)("em",{parentName:"p"},"constructor function")," and then instantiate an object using that function's name in conjunction with the ",Object(i.b)("em",{parentName:"p"},"new")," operator."),Object(i.b)("h3",{id:"1-using-object-initializers"},"1. Using Object Initializers"),Object(i.b)("p",null,"We can initialize an object using ",Object(i.b)("inlineCode",{parentName:"p"},"new Object()"),", ",Object(i.b)("inlineCode",{parentName:"p"},"Object.create()"),", or by using the ",Object(i.b)("em",{parentName:"p"},"literal")," (or ",Object(i.b)("em",{parentName:"p"},"initializer"),") notation. An object initializer is a comma-separated list of zero or more property name-value pairs defining an object, enclosed in curly braces (i.e., ",Object(i.b)("inlineCode",{parentName:"p"},"{}"),")."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Using Initializer Notation")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"var a = 3;\nvar b = 'Rome';\nvar c = false;\n\nvar o = {a, b, c};\n\nconsole.log('Object \\'o\\':', o);\n\nvar p = {\n    a: 3, \n    b: 'Rome', \n    c: false\n};\n\nconsole.log('Object \\'p\\':', p);\n\nvar q = {};\nconsole.log('Object \\'q\\' (Initial):', q);\nq.a = a;\nq.b = b;\nq.c = c;\nconsole.log('Object \\'q\\' (Updated):', q);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nObject 'o': { a: 3, b: 'Rome', c: false }\nObject 'p': { a: 3, b: 'Rome', c: false }\nObject 'q' (Initial): {}\nObject 'q' (Updated): { a: 3, b: 'Rome', c: false }\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Using ",Object(i.b)("inlineCode",{parentName:"strong"},"new Object()"))),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"var o = new Object();\n\no.a = 4;\no.b = 'Rome';\no.c = true;\n\nconsole.log('Object \\'o\\':', o);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nObject 'o': { a: 4, b: 'Rome', c: true }\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Using ",Object(i.b)("inlineCode",{parentName:"strong"},"Object.create()"))),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"var x = {\n    a: 5, \n    foo: function() {\n        return this.a * this.a;\n    }\n};\n\nvar o = Object.create(x);\n\nconsole.log('\\'x\\':', x);\nconsole.log('Object \\'o\\':', o);\nconsole.log('Property \\'o.a\\':', o.a);\nconsole.log('Method \\'o.foo()\\':', o.foo());\n\no.a = 7;\n\nconsole.log('Property \\'o.a\\':', o.a);\nconsole.log('Method \\'o.foo()\\':', o.foo());\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n'x': { a: 5, foo: [Function: foo] }\nObject 'o': {}\nProperty 'o.a': 5\nMethod 'o.foo()': 25\nProperty 'o.a': 7\nMethod 'o.foo()': 49\n")),Object(i.b)("h3",{id:"2-using-a-constructor-function"},"2. Using a Constructor Function"),Object(i.b)("p",null,"We can use a ",Object(i.b)("em",{parentName:"p"},"constructor function")," to create an object in two steps:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Define the object type by writing a constructor function. The strong convention here is for the function's name to be in ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Camel_case"}),"UpperCamelCase"),"."),Object(i.b)("li",{parentName:"ol"},"Use the ",Object(i.b)("inlineCode",{parentName:"li"},"new")," operator to create an instance of the object.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"function Actor(firstName, lastName, Age) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.Age = Age;\n}\n\nvar a1 = new Actor('Julia', 'Roberts', 48);\nvar a2 = new Actor('Kate', 'Winslet', 40);\n\nconsole.log('Object \\'a1\\':', a1);\nconsole.log('Object \\'a2\\':', a2);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nObject 'a1': Actor { firstName: 'Julia', lastName: 'Roberts', Age: 48 }\nObject 'a2': Actor { firstName: 'Kate', lastName: 'Winslet', Age: 40 }\n")),Object(i.b)("h1",{id:"iterating-over-arrays"},"Iterating Over Arrays"),Object(i.b)("p",null,"In this article, we demonstrate some of the ways of iterating over an array's elements in JavaScript."),Object(i.b)("h2",{id:"basic-for-loop"},"Basic ",Object(i.b)("em",{parentName:"h2"},"for")," Loop"),Object(i.b)("p",null,"We can use a standard ",Object(i.b)("em",{parentName:"p"},"for")," loop to iterate over an array's elements."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"const arr = ['a', 'b', 'c', 'd'];\n\n// 'i' is the index\nfor (let i = 0; i < arr.length; i++) {\n    console.log('arr[' + i + ']: ' + arr[i]);\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\narr[0]: a\narr[1]: b\narr[2]: c\narr[3]: d\n")),Object(i.b)("h2",{id:"the-forin-statement"},"The ",Object(i.b)("em",{parentName:"h2"},"for...in")," Statement"),Object(i.b)("p",null,"The ",Object(i.b)("em",{parentName:"p"},"for...in")," statement iterates over the enumerable properties of an object in an arbitrary order, which allows us to execute statements for each distinct property. In the case of an array, the property would be its elements. In the case of an object, that would be its properties."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Iterating Over an Object's Properties")),Object(i.b)("p",null,"When we use this loop to iterate over an object, we can perform operations on the array's property names and their corresponding values."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"const o = {\n    a: 1,\n    b: 2,\n    c: 3,\n    d: 4\n};\n\nconsole.log('property: value');\n// 'p' is the property\nfor (p in o) {\n    console.log(p + ': ' + o[p]);\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nproperty: value\na: 1\nb: 2\nc: 3\nd: 4\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Iterating Over an Array's Elements")),Object(i.b)("p",null,"When we use this loop to iterate over an array, the array's indices behave like properties."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"const o = ['first', 'second', false];\n\n// 'p' is the index\nfor (let p in o) {\n    console.log(p + ' ' + o[p]);\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n0 first\n1 second\n2 false\n")),Object(i.b)("h2",{id:"the-foreach-method"},"The ",Object(i.b)("em",{parentName:"h2"},"forEach")," Method"),Object(i.b)("p",null,"The ",Object(i.b)("em",{parentName:"p"},"forEach")," method iterates through an array and, for each element, it executes a function once."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"const arr = ['a', 'b', 'c', 'd'];\n\narr.forEach((value, index, array) => {\n    console.log('index', index, 'has a value of', value,\n    'which correlates to array[' + index + ']:', array[index]);\n});\n\narr.forEach((value, index) => {\n    console.log('index', index, 'has a value of', value);\n});\n\narr.forEach((value) => {\n    console.log('value:', value);\n});\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nindex 0 has a value of a which correlates to array[0]: a\nindex 1 has a value of b which correlates to array[1]: b\nindex 2 has a value of c which correlates to array[2]: c\nindex 3 has a value of d which correlates to array[3]: d\nindex 0 has a value of a\nindex 1 has a value of b\nindex 2 has a value of c\nindex 3 has a value of d\nvalue: a\nvalue: b\nvalue: c\nvalue: d\n")),Object(i.b)("h1",{id:"classes"},"Classes"),Object(i.b)("h2",{id:"functional-classes"},"Functional Classes"),Object(i.b)("p",null,"In this section, we'll discuss some of the ways we can use functions to simulate the behavior of classes."),Object(i.b)("h3",{id:"using-functions"},"Using Functions"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Define a normal JavaScript function."),Object(i.b)("li",{parentName:"ol"},"Create an object by using the ",Object(i.b)("inlineCode",{parentName:"li"},"new")," keyword."),Object(i.b)("li",{parentName:"ol"},"Define properties and methods for a created object using the ",Object(i.b)("inlineCode",{parentName:"li"},"this")," keyword.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"function Fruit (type) {\n    this.type = type;\n    this.color = 'unknown';\n    this.getInformation = getFruitInformation;\n}\n\nfunction getFruitInformation() {\n    return 'This ' + this.type + ' is ' + this.color + '.';\n}\n\nlet lime = new Fruit('Mexican lime');\nconsole.log(lime.getInformation());\n\nlime.color = 'green';\nconsole.log(lime.getInformation());\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nThis Mexican lime is unknown.\nThis Mexican lime is green.\n")),Object(i.b)("p",null,"We can also define the ",Object(i.b)("em",{parentName:"p"},"getInformation")," function internally:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"function Fruit (type) {\n    this.type = type;\n    this.color = 'unknown';\n    this.getInformation = function() {\n        return 'This ' + this.type + ' is ' + this.color + '.';\n    }\n}\n\nlet lime = new Fruit('Mexican lime');\nconsole.log(lime.getInformation());\n\nlime.color = 'green';\nconsole.log(lime.getInformation());\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nThis Mexican lime is unknown.\nThis Mexican lime is green.\n")),Object(i.b)("h3",{id:"the-prototype-property"},"The Prototype Property"),Object(i.b)("p",null,"The drawback of internally defining the ",Object(i.b)("em",{parentName:"p"},"getInformation")," function is that it recreates that function every time we create a new ",Object(i.b)("em",{parentName:"p"},"Fruit")," object. Fortunately, every function in JavaScript has something called a ",Object(i.b)("em",{parentName:"p"},"prototype property"),", which is empty by default. We can think of a function's prototype as an object blueprint or paradigm; when we add methods and properties to the prototype, they are accessible to ",Object(i.b)("em",{parentName:"p"},"all")," instances of that function. This is especially useful for ",Object(i.b)("em",{parentName:"p"},"inheritance")," (discussed below)."),Object(i.b)("p",null,"We can add a function to our constructor function's prototype like so:"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"function Fruit (type) {\n    this.type = type;\n    this.color = 'unknown';\n}\n\nFruit.prototype.getInformation = function() {\n    return 'This ' + this.type + ' is ' + this.color + '.';\n}\n\nlet lime = new Fruit('Mexican lime');\nconsole.log(lime.getInformation());\n\nlime.color = 'green';\nconsole.log(lime.getInformation());\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nThis Mexican lime is unknown.\nThis Mexican lime is green.\n")),Object(i.b)("h3",{id:"using-object-literals"},"Using Object Literals"),Object(i.b)("p",null,"We can use object literals to define an object's properties and functions by initializing a variable with a comma-separated list of property-value pairs enclosed in curly braces."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"let lime = {\n    type: 'Mexican lime',\n    color: 'green',\n    getInformation: function() {\n        return 'This ' + this.type + ' is ' + this.color + '.';\n    }\n}\n\nconsole.log(lime.getInformation());\n\nlime.color = 'yellow';\nconsole.log(lime.getInformation());\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nThis Mexican lime is green.\nThis Mexican lime is yellow.\n")),Object(i.b)("h3",{id:"singleton-class-using-a-function"},"Singleton Class Using a Function"),Object(i.b)("p",null,"A ",Object(i.b)("em",{parentName:"p"},"singleton")," class is a design pattern that restricts a class to a ",Object(i.b)("em",{parentName:"p"},"single instance"),". When we assign the value of ",Object(i.b)("inlineCode",{parentName:"p"},"new function(){...}")," to a variable, the following happens:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"We define an anonymous constructor function."),Object(i.b)("li",{parentName:"ol"},"We invoke the anonymous constructor function with the ",Object(i.b)("inlineCode",{parentName:"li"},"new")," keyword.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"let lime = new function() {\n    this.type = 'Mexican lime';\n    this.color = 'green';\n    this.getInformation = function() {\n        return 'This ' + this.type + ' is ' + this.color + '.';\n    };\n}\n\nconsole.log(lime.getInformation());\n\nlime.color = 'yellow';\nconsole.log(lime.getInformation());\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nThis Mexican lime is green.\nThis Mexican lime is yellow.\n")),Object(i.b)("h2",{id:"classes-1"},"Classes"),Object(i.b)("p",null,"JavaScript classes, introduced in ",Object(i.b)("em",{parentName:"p"},"ECMAScript 6"),", are essentially syntactic sugar over JavaScript's existing prototype-based inheritance that don't actually introduce a new object-oriented inheritance model. This syntax is a means of more simply and clearly creating objects and deal with inheritance."),Object(i.b)("p",null,"We define classes in two ways:"),Object(i.b)("h3",{id:"class-declarations"},"Class Declarations"),Object(i.b)("p",null,"One way to define a class is using a class declaration. To declare a class, we use the ",Object(i.b)("inlineCode",{parentName:"p"},"class")," keyword and follow it with the class' name. Ideally, we always write class names in TitleCase."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"class Polygon {\n    constructor(height, width) {\n        this.height = height;\n        this.width = width;\n    }\n}\n\nlet p = new Polygon(1, 2);\nconsole.log('Polygon p:', p);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nPolygon p: Polygon { height: 1, width: 2 }\n")),Object(i.b)("p",null,"An important difference between function declarations and class declarations is that function declarations are hoisted (i.e., can be referenced before they're declared) but class declarations are not. This means we must first declare our class before attempting to access (or reference) it; if we fail to do so, our code throws a ",Object(i.b)("em",{parentName:"p"},"ReferenceError"),"."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"try {\n    let p = new Polygon(1, 2);\n    console.log('Polygon p:', p);\n}\ncatch (exception) {\n    console.log(exception.name + ': ' + exception.message);\n}\nclass Polygon {\n    constructor(height, width) {\n        this.height = height;\n        this.width = width;\n    }\n}\n\np = new Polygon(1, 2);\nconsole.log('Polygon p:', p);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nReferenceError: Polygon is not defined\nPolygon p: Polygon { height: 1, width: 2 }\n")),Object(i.b)("h3",{id:"class-expressions"},"Class Expressions"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Class expressions")," are another way to define a class, and they can be either ",Object(i.b)("em",{parentName:"p"},"named")," or ",Object(i.b)("em",{parentName:"p"},"unnamed"),". The name given to a named class expression is local to the class' body."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Unnamed Class Expression")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"let Polygon = class {\n    constructor(height, width) {\n        this.height = height;\n        this.width = width;\n    }\n};\n\nconsole.log('Polygon:', Polygon);\nlet p = new Polygon(1, 2);\nconsole.log('p:', p);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nPolygon: class {\n    constructor(height, width) {\n        this.height = height;\n        this.width = width;\n    }\n}\np: Polygon { height: 1, width: 2 }\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Named Class Expression")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"let Polygon = class Polygon {\n    constructor(height, width) {\n        this.height = height;\n        this.width = width;\n    }\n};\n\nconsole.log('Polygon:', Polygon);\nlet p = new Polygon(1, 2);\nconsole.log('p:', p);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nPolygon: class Polygon {\n    constructor(height, width) {\n        this.height = height;\n        this.width = width;\n    }\n}\np: Polygon { height: 1, width: 2 \n")),Object(i.b)("h2",{id:"the-constructor-method"},"The Constructor Method"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("em",{parentName:"li"},"constructor method")," is a special method we use to create and initialize objects of a class."),Object(i.b)("li",{parentName:"ul"},"A class can only have ",Object(i.b)("em",{parentName:"li"},"one")," special method with the name ",Object(i.b)("inlineCode",{parentName:"li"},"constructor"),", and attempting to write a class containing more than one constructor method will throw a ",Object(i.b)("em",{parentName:"li"},"SyntaxError"),"."),Object(i.b)("li",{parentName:"ul"},"To implement ",Object(i.b)("em",{parentName:"li"},"inheritance"),", we can use the ",Object(i.b)("inlineCode",{parentName:"li"},"super")," keyword in a constructor to call a parent class constructor.")),Object(i.b)("h2",{id:"prototype-methods"},"Prototype Methods"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"class Polygon {\n    constructor(height, width) {\n        this.height = height;\n        this.width = width;\n    }\n    getArea() {\n        return this.height * this.width;\n    }\n}\n\nconst square = new Polygon(10, 10);\n\nconsole.log(square.getArea());\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n100\n")),Object(i.b)("h2",{id:"static-methods"},"Static Methods"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Static methods")," are methods relevant to all instances of a class \u2014 not just any one instance. These methods receive information from their arguments and not a class instance, which allows us to invoke a class' static methods without creating an instance of the class. In fact, we actually ",Object(i.b)("em",{parentName:"p"},"can't")," call a static method on an instantiated class object (attempting to do so throws a ",Object(i.b)("em",{parentName:"p"},"TypeError"),")."),Object(i.b)("p",null,"We define a class' static methods using the ",Object(i.b)("inlineCode",{parentName:"p"},"static")," keyword. We typically use these methods to create utility functions for applications, as they can't be called on class objects."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    static distance(a, b) {\n        const dx = a.x - b.x;\n        const dy = a.y - b.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n}\n\nconst p1 = new Point(5, 5);\nconst p2 = new Point(10, 10);\n\n// The correct way to call a static method\nconsole.log(Point.distance(p1, p2));\n\n// Attempt to call a static method on an instance of the class\ntry {\n    console.log(p1.distance(p1, p2));\n}\ncatch (exception) {\n    console.log(exception.name + ': ' + exception.message);\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n7.0710678118654755\nTypeError: p1.distance is not a function\n")),Object(i.b)("h2",{id:"inheritance"},"Inheritance"),Object(i.b)("p",null,"In essence, this construct allows us to create an object prototype or class that's an ",Object(i.b)("em",{parentName:"p"},"extension")," of another object prototype or class. A class inheriting from some other class (referred to as a superclass or parent class) is called a subclass (or child class). The subclass inherits the superclass' methods and behaviors, but it can also declare new ones or even override existing ones."),Object(i.b)("h2",{id:"subclassing-with-the-extends-keyword"},"Subclassing with the ",Object(i.b)("inlineCode",{parentName:"h2"},"extends")," Keyword"),Object(i.b)("p",null,"We use the ",Object(i.b)("inlineCode",{parentName:"p"},"extends")," keyword in class declarations or class expressions to create a child class (i.e., subclass)."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"class Animal {\n    constructor(name) {\n        this.name = name;\n    }\n    speak() {\n        console.log(this.name, 'speaks.');\n    }\n}\n\nclass Dog extends Animal {\n    speak() {\n        console.log(this.name, 'barks.');\n    }\n}\n\nlet spot = new Dog('Spot');\nspot.speak();\n\nspot = new Animal('Spot');\nspot.speak();\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nSpot barks.\nSpot speaks.\n")),Object(i.b)("p",null,"We can also ",Object(i.b)("em",{parentName:"p"},"extend")," functional classes:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"function Animal(name) {\n    this.name = name;\n}\n\nAnimal.prototype.speak = function() {\n    console.log(this.name, 'speaks.');\n}\n\nclass Dog extends Animal {\n    speak() {\n        console.log(this.name, 'barks.');\n    }\n}\n\nlet spot = new Dog('Spot');\nspot.speak();\n\nspot = new Animal('Spot');\nspot.speak();\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nSpot barks.\nSpot speaks.\n")),Object(i.b)("h2",{id:"superclass-calls-using-the-super-keyword"},"Superclass Calls Using the ",Object(i.b)("inlineCode",{parentName:"h2"},"super")," Keyword"),Object(i.b)("p",null,"We use the ",Object(i.b)("em",{parentName:"p"},"super")," keyword to call functions on an object's parent."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"class Animal {\n    constructor(name) {\n        this.name = name;\n    }\n    speak() {\n        console.log(this.name, 'speaks.');\n    }\n}\n\nclass Dog extends Animal {\n    speak() {\n        super.speak();\n        console.log(this.name, 'barks.');\n    }\n}\n\nlet spot = new Dog('Spot');\nspot.speak();\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nSpot speaks.\nSpot barks.\n")),Object(i.b)("h2",{id:"extending-an-object"},"Extending an Object"),Object(i.b)("p",null,"The ability to extend multiple classes from the same superclass (or model multiple object types after the same prototype) is powerful because it provides us with certain implied guarantees about the basic functionality of the subclasses; as extensions of the parent class, subclasses are guaranteed to (at minimum) have the superclass' fields, methods, and functions."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("p",null,"In this example, we call the superclass constructor using ",Object(i.b)("inlineCode",{parentName:"p"},"super()"),", override a superclass function (",Object(i.b)("inlineCode",{parentName:"p"},"speak()"),"), add an additional property (",Object(i.b)("inlineCode",{parentName:"p"},"collarColor"),"), and add a new subclass method (",Object(i.b)("inlineCode",{parentName:"p"},"collar()"),")."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"class Animal {\n    constructor(name) {\n        this.animalType = 'Animal'\n        this.name = name;\n    }\n    type() {\n        console.log(this.name, 'is type', this.animalType);\n    }\n    speak() {\n        console.log(this.name, 'speaks.');\n    }\n}\n\nclass Dog extends Animal {\n    constructor(name, collarColor) {\n        super(name);\n        this.animalType = 'Dog';\n        this.collarColor = collarColor;\n    }\n    speak() {\n        console.log(this.name, 'barks.');\n    }\n    collar() {\n        console.log(this.name, 'has a', this.collarColor, 'collar.');\n    }\n}\n\nlet spot = new Dog('Spot', 'red');\nspot.type();\nspot.speak();\nspot.collar();\n\n// Because the Animal constructor only expects one argument,\n// only the first value passed to it is used\nspot = new Animal('Spot', 'white');\nspot.type();\nspot.speak();\ntry {\n    spot.collar();\n}\ncatch (exception) {\n    console.log(exception.name + ': ' + exception.message\n    + ' (collar is a method of Dog, not Animal).');\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nSpot is type Dog\nSpot barks.\nSpot has a red collar.\nSpot is type Animal\nSpot speaks.\nTypeError: spot.collar is not a function (collar is a method of Dog, not Animal).\n")),Object(i.b)("h1",{id:"template-literals"},"Template Literals"),Object(i.b)("p",null,"Template literals (formerly known as ",Object(i.b)("em",{parentName:"p"},"template strings"),") are string literals that allow for embedded expressions. We typically use them to express strings spanning multiple lines or for ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/String_interpolation"}),"string interpolation"),", which essentially allows us to create a template with one or more placeholders for inserting variable text at a later time."),Object(i.b)("p",null,"While traditional strings are wrapped in single or double quotes, template literals are wrapped in backtick ",Object(i.b)("inlineCode",{parentName:"p"},"(`)")," characters. A template literal can contain placeholders, which are preceded by a dollar sign (",Object(i.b)("inlineCode",{parentName:"p"},"$"),") and wrapped in curly braces (",Object(i.b)("inlineCode",{parentName:"p"},"{}"),"). For example, in the template literal ",Object(i.b)("inlineCode",{parentName:"p"},"${expression}")," , the $ expression$ text between the placeholders is passed to a function. The default function simply concatenates the template literal's parts into a single string."),Object(i.b)("p",null,"Any time we see an expression preceding a template literal, we call the expression a ",Object(i.b)("em",{parentName:"p"},"tag")," and the template string a ",Object(i.b)("em",{parentName:"p"},"tagged template literal"),". In these instances, we call the tag expression (typically a function) with the processed template literal, which we can then manipulate before outputting the final string."),Object(i.b)("h2",{id:"multi-line-strings"},"Multi-line Strings"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Print a Multi-Line String Using Normal Strings")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'console.log("first line\\n" + "second line");\nconsole.log("first line" + "\\nsecond line");\nconsole.log("first line\\nsecond line");\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nfirst line\nsecond line\nfirst line\nsecond line\nfirst line\nsecond line\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Print a Multi-Line String Using Template Literals")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"console.log(`first line\nsecond line`);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nfirst line\nsecond line\n")),Object(i.b)("p",null,"Regardless of which approach we choose, the output is the same."),Object(i.b)("h2",{id:"expression-interpolation"},"Expression Interpolation"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example"),"\n",Object(i.b)("strong",{parentName:"p"},"Print a Line Using Normal Strings")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"const a = 2;\nconst b = 3;\n\nconsole.log(\n    'The sum of a and b is ' + (a + b) + '.\\n' \n    + 'The product of a and b is ' + (a * b) + '.'\n);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nThe sum of a and b is 5.\nThe product of a and b is 6.\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Print a Line Using Template Literals")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"const a = 2;\nconst b = 3;\n\nconsole.log(`The sum of a and b is ${a + b}. \nThe product of a and b is ${a * b}.`);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nThe sum of a and b is 5. \nThe product of a and b is 6.\n")),Object(i.b)("h2",{id:"tagged-template-literals"},"Tagged Template Literals"),Object(i.b)("p",null,"Tagged template literals allow us to use a function to modify the output of a template literal. In this construct:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"The first argument contains an array of string literals."),Object(i.b)("li",{parentName:"ol"},"The subsequently processed arguments are the values of the substitution expressions.")),Object(i.b)("p",null,"After processing all the arguments, the function returns the manipulated string."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'var a = 5;\nvar b = 10;\n\nfunction foo(strings, ...values) {\n    console.log("." + strings[0] + ".");\n    console.log("." + strings[1] + ".");\n    console.log("." + strings[2] + ".");\n    console.log("." + strings[3] + ".");\n    console.log(values[0]);\n    console.log(values[1]);\n    console.log(values[2]);\n}\n\nfoo`Sum ${a + b}\nProduct ${a * b}\nDivision ${b / a}`;\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n.Sum .\n.\nProduct .\n.\nDivision .\n..\n15\n50\n2\n")),Object(i.b)("p",null,"Now we can see that, the total number of string literals is one more than the number of total cooked expressions. The first string literal is the string before the first cooked expression, the last string literal is the string after the last cooked expression and other literals are in between the cooked expressions."),Object(i.b)("p",null,"We can also return from tagged templates:"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"var a = 5;\nvar b = 10;\n\nfunction foo(strings, ...values) {\n    let a = values[0];\n    let b = values[1];\n\n    return `Sum ${a + b}\nProduct ${a * b} \nDivision ${b / a}`;\n}\n\nconsole.log(foo`Num1 ${a + 10}\nNum2 ${b * 2} \nNum3 ${b / a}`);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nSum 35\nProduct 300 \nDivision 1.3333333333333333\n")),Object(i.b)("h1",{id:"arrow-functions"},"Arrow Functions"),Object(i.b)("p",null,"These expressions lexically bind the ",Object(i.b)("inlineCode",{parentName:"p"},"this")," value while using less syntax than a typical function expression. Arrow functions are always ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Anonymous_function"}),"anonymous"),"."),Object(i.b)("p",null,"Here are some basic examples of arrow function syntax:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"(parameter) => {statements}\nparameter => {statements}\nparameter => expression\nparameter => {return expression}\n\n(param1, param2, ..., paramN) => {statements}\n(param1, param2, ..., paramN) => expression\n(param1, param2, ..., paramN) => {return expression}\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example"),"\n",Object(i.b)("strong",{parentName:"p"},"Let's look at some simple ways to apply this syntax:")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"'use strict';\n\nconst makeArray = (...values) => { return values };\nconsole.log('Array:', makeArray(1, 2, 3, 4));\nconsole.log('Array:', makeArray(1, 2, 3, 4, 5, 6));\n\nconst getSum = (a, b) => { return a + b };\nconsole.log('1 + 2 =', getSum(1, 2));\n\nconst greeting = 'Hello, World.';\nconst capitalize = (myString) => { return myString.toUpperCase() };\nconsole.log(greeting, '=>', capitalize(greeting));\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nArray: [ 1, 2, 3, 4 ]\nArray: [ 1, 2, 3, 4, 5, 6 ]\n1 + 2 = 3\nHello, World. => HELLO, WORLD.\n")),Object(i.b)("h2",{id:"using-arrow-functions"},"Using Arrow Functions"),Object(i.b)("p",null,"Let's look at some ways we can use arrow functions to make our code shorter."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example"),"\n",Object(i.b)("strong",{parentName:"p"},"Sum the Elements of an Array")),Object(i.b)("p",null,"While we can certainly iterate over an array and sum each value, we can also use the ",Object(i.b)("em",{parentName:"p"},"reduce")," function."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"const arr = [1, 2, 3, 4, 5];\n\nconst sum = arr.reduce(function (a, b) {\n    return a + b;\n}, 0);\n\nconsole.log('Array:', arr);\nconsole.log('Sum:', sum);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nArray: [ 1, 2, 3, 4, 5 ]\nSum: 15\n")),Object(i.b)("p",null,"Now, let's reduce the length of our code using an arrow function:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"const arr = [1, 2, 3, 4, 5];\n\nconst sum = arr.reduce((a, b) => { return a + b }, 0);\n\nconsole.log('Array:', arr);\nconsole.log('Sum:', sum);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nArray: [ 1, 2, 3, 4, 5 ]\nSum: 15\n")),Object(i.b)("p",null,"Let's further reduce it by getting rid of the ",Object(i.b)("inlineCode",{parentName:"p"},"return"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"const arr = [1, 2, 3, 4, 5];\n\nconst sum = arr.reduce((a, b) => a + b, 0);\n\nconsole.log('Array:', arr);\nconsole.log('Sum:', sum);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nArray: [ 1, 2, 3, 4, 5 ]\nSum: 15\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example"),"\n",Object(i.b)("strong",{parentName:"p"},"Find the Length of Strings in an Array")),Object(i.b)("p",null,"Let's take an array of strings and use it to create a new array containing the respective lengths of its elements."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"const arr = ['first', 'second', 'third', 'fourth', 'fifth'];\n\nconst len = arr.map(function(s) { return s.length });\n\nconsole.log('Array:', arr);\nconsole.log('Lengths:', len);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nArray: [ 'first', 'second', 'third', 'fourth', 'fifth' ]\nLengths: [ 5, 6, 5, 6, 5 ]\n")),Object(i.b)("p",null,"Now, let's reduce the length of our code using an arrow function:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"const arr = ['first', 'second', 'third', 'fourth', 'fifth'];\n\nconst len = arr.map(s => s.length);\n\nconsole.log('Array:', arr);\nconsole.log('Lengths:', len);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nArray: [ 'first', 'second', 'third', 'fourth', 'fifth' ]\nLengths: [ 5, 6, 5, 6, 5 ]\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example"),"\n",Object(i.b)("strong",{parentName:"p"},"Find Array Elements Greater Than a Value")),Object(i.b)("p",null,"Let's find all the elements in an array that are greater than $3$ and add them to a new array."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"const arr = [1, 2, 3, 4, 5];\n\nconst greaterThan3 = arr.filter(function(a) {\n    return a > 3;\n});\n\nconsole.log('Array:', arr);\nconsole.log('Elements Greater Than 3:', greaterThan3);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nArray: [ 1, 2, 3, 4, 5 ]\nElements Greater Than 3: [ 4, 5 ]\n")),Object(i.b)("p",null,"Now, let's reduce the length of our code using an arrow function:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"const arr = [1, 2, 3, 4, 5];\n\nconst greaterThan3 = arr.filter(a => a > 3);\n\nconsole.log('Array:', arr);\nconsole.log('Elements Greater Than 3:', greaterThan3);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nArray: [ 1, 2, 3, 4, 5 ]\nElements Greater Than 3: [ 4, 5 ]\n")),Object(i.b)("h1",{id:"bitwise-operators"},"Bitwise Operators"),Object(i.b)("p",null,"Before discussing bitwise operators, let's review the following:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Binary numbers"),Object(i.b)("li",{parentName:"ul"},"Base-$10$ (decimal number) to base-$2$ (binary number) conversions"),Object(i.b)("li",{parentName:"ul"},"Base-$2$ (binary number) to base-$10$ (decimal number) conversions"),Object(i.b)("li",{parentName:"ul"},"Representing negative base-$10$ numbers in base-$2$")),Object(i.b)("h2",{id:"binary-number-basics"},"Binary Number Basics"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The binary, or base-$2$, numeral system is a way for us to express numbers. It's called binary because it only uses ",Object(i.b)("em",{parentName:"li"},"two")," symbols, $0$ and $1$, to express these numbers. Examples of binary numbers are $1011$,$100011$ , and $111$."),Object(i.b)("li",{parentName:"ul"},"The number of symbols in a number system is called its ",Object(i.b)("em",{parentName:"li"},"base")," or ",Object(i.b)("em",{parentName:"li"},"radix"),". T,his is why we often see binary numbers referred to as base-$2$ (because each digit is in $","{","0,1,2,3,4,5,6,7,","}","$, and decimal numbers referred to as base- (because each digit is in )."),Object(i.b)("li",{parentName:"ul"},"We use the notation $(?)",Object(i.b)("em",{parentName:"li"},"b$to discuss numbers with different radixes, where $?$is the number and $b$is the base. For example, $(1101)_2$ is the binary equivalent of the decimal number $(13)"),"{10}$."),Object(i.b)("li",{parentName:"ul"},"Each digit in a binary number is called a ",Object(i.b)("em",{parentName:"li"},"bit"),".")),Object(i.b)("h2",{id:"base-10-decimal-to-base-2-binary-conversions"},"Base-10 (Decimal) to Base-2 (Binary) Conversions"),Object(i.b)("p",null,"We use the following algorithm to convert a decimal integer to a binary number:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Take the decimal integer, divide it by $2$, and record the quotient (the number of times $2$ divided the integer) and the remainder (the number of units left over from the division, which will always be $0$ or $1$)."),Object(i.b)("li",{parentName:"ol"},"Repeat step $1$ on the quotient until the quotient becomes $0$."),Object(i.b)("li",{parentName:"ol"},"Look at the sequence of remainders. The remainder from the first division operation corresponds to the binary number's ",Object(i.b)("em",{parentName:"li"},"least significant bit")," (LSB) and the remainder from the last division operation corresponds to the number's ",Object(i.b)("em",{parentName:"li"},"most significant bit")," (MSB). To get our binary number, we simply need to concatenate these remainder bits from most to least significant.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Examples")),Object(i.b)("p",null,"The table below depicts the conversion from to :"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"$n$"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"$\\frac{n}{2} $"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Remainder"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Significance"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"$71$"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"$35$"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"$1$"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Least")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"$35$"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"$17$"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"$1$"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"$\\uparrow$")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"$17$"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"$8$"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"$1$"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"$\\uparrow$")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"$8$"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"$4$"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"$0$"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"$\\uparrow$")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"$4$"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"$2$"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"$0$"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"$\\uparrow$")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"$2$"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"$1$"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"$0$"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"$\\uparrow$")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"$1$"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"$0$"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"$1$"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Most")))),Object(i.b)("p",null,"When we concatenate our remainder bits from the bottom up (i.e., ",Object(i.b)("em",{parentName:"p"},"most")," to ",Object(i.b)("em",{parentName:"p"},"least")," significant), we get ."),Object(i.b)("h2",{id:"base--binary-to-base--decimal-conversions"},"Base- (Binary) to Base- (Decimal) Conversions"),Object(i.b)("p",null,"Let's say we have a binary number with bits we can express as . We use the following summation to calculate its base- integer value:"),Object(i.b)("p",null,"Note that is the LSB and is the MSB."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("p",null,"The table below depicts the conversion from to :"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Significance"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Least"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Most"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))))),Object(i.b)("p",null,"When we sum the values of each , we get ."),Object(i.b)("h2",{id:"representing-negative-base--numbers-in-base-"},"Representing Negative Base- Numbers in Base-"),Object(i.b)("p",null,"In this explanation, we're representing our integers as -bit signed binary numbers. To represent an integer, , in binary, we perform the following steps:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Find the -bit binary representation of ."),Object(i.b)("li",{parentName:"ol"},"Take the 's complement. We do this by inverting all the binary number's bits (i.e., every becomes a , and every becomes a )."),Object(i.b)("li",{parentName:"ol"},"Take the 's complement by adding to the 's complement.")),Object(i.b)("p",null,"The 's complement is the binary representation of ."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Examples")),Object(i.b)("p",null,"Let's look at the binary representation of :"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"First, let's look at . When we convert it to binary, we get ."),Object(i.b)("li",{parentName:"ol"},"The 's complement of is ."),Object(i.b)("li",{parentName:"ol"},"Then we add to to get 's 's complement, , which is the value of .")),Object(i.b)("p",null,"Let's look at the binary representation of :"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"}),Object(i.b)("li",{parentName:"ol"},"is 's 's complement."),Object(i.b)("li",{parentName:"ol"},"is 's 's complement (i.e., ).")),Object(i.b)("h2",{id:"bitwise-operation-conventions"},"Bitwise Operation Conventions"),Object(i.b)("p",null,"Conceptually, the bitwise logical operators work as follows:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The operands are converted to -bit integers, meaning they're expressed as sequences of zeroes and ones. Any number larger than bits is reduced to bits by cutting off and discarding its excess most significant bits. The example below shows a binary integer before and after it's converted to a -bit integer:")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"Before: 11100110111110100000000000000110000000000001\nAfter:              10100000000000000110000000000001\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Each bit in the first operand is paired with the corresponding bit in the second operand from least to most significant. In other words, the first LSB matches the first LSB, the second LSB matches the second LSB, and so on."),Object(i.b)("li",{parentName:"ul"},"The operator is applied to each pair of bits so that the resulting number is constructed bitwise (i.e., bit-by-bit).")),Object(i.b)("h2",{id:"bitwise-and-"},"Bitwise AND (",Object(i.b)("inlineCode",{parentName:"h2"},"&"),")"),Object(i.b)("p",null,"This operator performs the ",Object(i.b)("em",{parentName:"p"},"AND")," operation on each pair of bits. Given two binary numbers, and , the result of an AND operation on the corresponding bits at each position (i.e., ) is if and only if both and are . The truth table for the bitwise AND operation is:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))))),Object(i.b)("p",null,"For example, ."),Object(i.b)("h2",{id:"bitwise-or-"},"Bitwise OR (",Object(i.b)("inlineCode",{parentName:"h2"},"|"),")"),Object(i.b)("p",null,"This operator performs the ",Object(i.b)("em",{parentName:"p"},"OR")," operation on each pair of bits. Given two binary numbers, and , the result of an OR operation on the corresponding bits at each position (i.e., ) is if and/or are . The truth table for the bitwise OR operation is:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))))),Object(i.b)("p",null,"For example, ."),Object(i.b)("h2",{id:"bitwise-xor-"},"Bitwise XOR (",Object(i.b)("inlineCode",{parentName:"h2"},"^"),")"),Object(i.b)("p",null,"This operator performs the ",Object(i.b)("em",{parentName:"p"},"XOR")," operation on each pair of bits. Given two binary numbers, and , the result of an XOR operation on the corresponding bits at each position (i.e., ) is if ",Object(i.b)("em",{parentName:"p"},"either")," ",Object(i.b)("em",{parentName:"p"},"or")," is (i.e., the values of the two operands are different). The truth table for the bitwise XOR operation is:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))))),Object(i.b)("p",null,"For example, ."),Object(i.b)("h2",{id:"bitwise-not-"},"Bitwise NOT (",Object(i.b)("inlineCode",{parentName:"h2"},"~"),")"),Object(i.b)("p",null,"This operator performs the ",Object(i.b)("em",{parentName:"p"},"NOT")," operation on each pair of bits in a number. Given a binary number, , the NOT operation (i.e., ) inverts each bit in the number. The truth table for the bitwise NOT operation is:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))))),Object(i.b)("p",null,"For example, ."),Object(i.b)("h2",{id:"additional-examples"},"Additional Examples"),Object(i.b)("p",null,"Here are some more examples of bitwise operations:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Bitwise AND\n     9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 & 9 (base 10) = 00000000000000000000000000001000 (base 2) = 8 (base 10)\n\n// Bitwise OR\n     9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 | 9 (base 10) = 00000000000000000000000000001111 (base 2) = 15 (base 10)\n\n// Bitwise XOR\n     9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 ^ 9 (base 10) = 00000000000000000000000000000111 (base 2) = 7 (base 10)\n\n// Bitwise NOT\n 9 (base 10) = 00000000000000000000000000001001 (base 2)\n               --------------------------------\n~9 (base 10) = 11111111111111111111111111110110 (base 2) = -10 (base 10)\n")),Object(i.b)("h1",{id:"dates"},"Dates"),Object(i.b)("p",null,"A JavaScript Date instance represents a single moment in time based on the number of milliseconds elapsed since $1\\ January, 1970\\ UTC$."),Object(i.b)("h2",{id:"creating-date-instance"},"Creating Date Instance"),Object(i.b)("p",null,"There are four constructors we can use to create a ",Object(i.b)("em",{parentName:"p"},"Date")," object, defined below."),Object(i.b)("h3",{id:"1-using-new-date"},"1. Using ",Object(i.b)("inlineCode",{parentName:"h3"},"new Date()")),Object(i.b)("p",null,"The ",Object(i.b)("em",{parentName:"p"},"default constructor")," creates a JavaScript ",Object(i.b)("em",{parentName:"p"},"Date")," object for the current date and time (according to your system settings)."),Object(i.b)("h3",{id:"2-using-new-datevalue"},"2. Using ",Object(i.b)("inlineCode",{parentName:"h3"},"new Date(value)")),Object(i.b)("p",null,"This constructor has a parameter, $value$, which is an integer representing the number of milliseconds elapsed since  $1\\ January\\ 1970\\ 00:00:00\\ UTC$ (this is a ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Unix_time"}),"Unix Epoch"),", though you should keep in mind that most Unix timestamp functions count in seconds)."),Object(i.b)("h3",{id:"3-using-new-datedatestring"},"3. Using ",Object(i.b)("inlineCode",{parentName:"h3"},"new Date(dateString)")),Object(i.b)("p",null,"This constructor has a parameter, $dateString$, which is a String describing a date. The $dateString$ must be in a format recognized by the ",Object(i.b)("inlineCode",{parentName:"p"},"Date.parse()")," function, such as ",Object(i.b)("inlineCode",{parentName:"p"},"MM/DD/YYYY")," or ",Object(i.b)("inlineCode",{parentName:"p"},"Month Day, Year"),". For example, ",Object(i.b)("inlineCode",{parentName:"p"},"01/01/1980")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Jan 1, 1980")," are both strings that can be successfully parsed using the ",Object(i.b)("em",{parentName:"p"},"parse")," function."),Object(i.b)("h3",{id:"4-using-new-dateyear-month-day-hour-minutes-seconds-milliseconds"},"4. Using new Date(year, month, day, hour, minutes, seconds, milliseconds)"),Object(i.b)("p",null,"This constructor has the following parameters:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"$year$ : An integer denoting the calendar year. Values from $0$ through $99$ map to the years $1900$ through $1999$."),Object(i.b)("li",{parentName:"ul"},"$month$ : A one or two digit integer denoting the zero-indexed month. This means that $0$ denotes January $11$ and denotes December."),Object(i.b)("li",{parentName:"ul"},"$day$ : Optional. An integer denoting the specific day number within the calendar month."),Object(i.b)("li",{parentName:"ul"},"$hour$ : Optional. An integer denoting the hour of the day."),Object(i.b)("li",{parentName:"ul"},"$minute$ : Optional. An integer denoting the minute segment of a time."),Object(i.b)("li",{parentName:"ul"},"$second$ : Optional. An integer denoting the second segment of a time."),Object(i.b)("li",{parentName:"ul"},"$millisecond$ : Optional. An integer denoting the millisecond segment of a time.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Input Format")),Object(i.b)("p",null,"The first line contains $date1$ .\nThe second line contains $date2$."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"function main(input) {\n    var date1 = new Date(input[0]);\n    console.log(date1.toString());\n    console.log(date1.toISOString());\n\n    var date2 = new Date(input[1]);\n    console.log(date2.toString());\n    console.log(date2.toISOString());\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Input\n10/11/2009\n2016, 04, 22\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nSun Oct 11 2009 00:00:00 GMT+0000 (Coordinated Universal Time)\n2009-10-11T00:00:00.000Z\nFri Apr 22 2016 00:00:00 GMT+0000 (Coordinated Universal Time)\n2016-04-22T00:00:00.000Z\n")),Object(i.b)("h2",{id:"date-get-methods"},"Date ",Object(i.b)("inlineCode",{parentName:"h2"},"get")," Methods"),Object(i.b)("h3",{id:"1-dategettime"},"1. Date.getTime()"),Object(i.b)("p",null,"Get the time in milliseconds elapsed since $January\\ 1, 1970$ ."),Object(i.b)("h3",{id:"2-dategetfullyear"},"2. Date.getFullYear()"),Object(i.b)("p",null,"Get the four-digit year ($yyyy$)."),Object(i.b)("h3",{id:"3-dategetmonth"},"3. Date.getMonth()"),Object(i.b)("p",null,"Get the ",Object(i.b)("em",{parentName:"p"},"Date")," object's month as a zero-indexed number ($0-11$)."),Object(i.b)("h3",{id:"4-dategetdate"},"4. Date.getDate()"),Object(i.b)("p",null,"Get the ",Object(i.b)("em",{parentName:"p"},"Date")," object's day as a number ($0-31$)."),Object(i.b)("h3",{id:"5-dategetday"},"5. Date.getDay()"),Object(i.b)("p",null,"Get the ",Object(i.b)("em",{parentName:"p"},"Date")," object's weekday as a number ($0-6$)."),Object(i.b)("h3",{id:"6-dategethours"},"6. Date.getHours()"),Object(i.b)("p",null,"Get the ",Object(i.b)("em",{parentName:"p"},"Date")," object's hour ($0-23$)."),Object(i.b)("h3",{id:"7-dategetminutes"},"7. Date.getMinutes()"),Object(i.b)("p",null,"Get the ",Object(i.b)("em",{parentName:"p"},"Date")," object's minutes ($0-59$)"),Object(i.b)("h3",{id:"8-dategetseconds"},"8. Date.getSeconds()"),Object(i.b)("p",null,"Get the ",Object(i.b)("em",{parentName:"p"},"Date")," object's seconds ($0-59$)."),Object(i.b)("h3",{id:"9-dategetmilliseconds"},"9. Date.getMilliseconds()"),Object(i.b)("p",null,"Get the ",Object(i.b)("em",{parentName:"p"},"Date")," object's milliseconds ($0-999$)."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("p",null,"Click ",Object(i.b)("em",{parentName:"p"},"Run")," below to see this in code."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Input Format")),Object(i.b)("p",null,"A single date string in a format recognized by ",Object(i.b)("inlineCode",{parentName:"p"},"Date.parse()"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'function main(input) {\n    let date = new Date(input);\n\n    console.log("date: " + date);\n    console.log("date.getDate(): " + date.getDate());\n    console.log("date.getDay(): " + date.getDay());\n    console.log("date.getFullYear(): " + date.getFullYear());\n    console.log("date.getHours(): " + date.getHours());\n    console.log("date.getMilliseconds(): " + date.getMilliseconds());\n    console.log("date.getMinutes(): " + date.getMinutes());\n    console.log("date.getMonth(): " + date.getMonth());\n    console.log("date.getSeconds(): " + date.getSeconds());\n    console.log("date.getTime(): " + date.getTime());\n    console.log("date.getYear(): " + date.getYear());\n    console.log("date.toDateString(): " + date.toDateString());\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Input\nFeb 3, 1987 12:34:56:789\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\ndate: Tue Feb 03 1987 12:34:56 GMT+0000 (Coordinated Universal Time)\ndate.getDate(): 3\ndate.getDay(): 2\ndate.getFullYear(): 1987\ndate.getHours(): 12\ndate.getMilliseconds(): 789\ndate.getMinutes(): 34\ndate.getMonth(): 1\ndate.getSeconds(): 56\ndate.getTime(): 539354096789\ndate.getYear(): 87\ndate.toDateString(): Tue Feb 03 1987\n")),Object(i.b)("p",null,"You could also create a date object for the date given as input using the following date constructor and arguments:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Date(year, month, day, hour, minutes, seconds, milliseconds)\nlet date = new Date(1987, 1, 3, 12, 34, 56, 789);\n")),Object(i.b)("h1",{id:"regular-expressions"},"Regular Expressions"),Object(i.b)("p",null,"A ",Object(i.b)("em",{parentName:"p"},"Regular Expression"),", or ",Object(i.b)("em",{parentName:"p"},"RegEx"),", is a ",Object(i.b)("em",{parentName:"p"},"pattern")," used to match character combinations in a string. In JavaScript, regular expressions are also objects. We'll start by giving some basic examples, and then explain the syntax needed to construct and understand RegExes in further detail."),Object(i.b)("h2",{id:"creating-a-regular-expression"},"Creating a Regular Expression"),Object(i.b)("p",null,"A regular expression consists of a ",Object(i.b)("em",{parentName:"p"},"pattern string")," and, potentially, a ",Object(i.b)("em",{parentName:"p"},"flag")," specifying further detail on how the pattern should be matched. We construct regular expressions by using ",Object(i.b)("em",{parentName:"p"},"regular expression literals")," or ",Object(i.b)("em",{parentName:"p"},"RegExp")," class objects."),Object(i.b)("h2",{id:"regular-expression-patterns"},"Regular Expression Patterns"),Object(i.b)("p",null,"We generally construct RegEx patterns using the basic characters we wish to match (e.g., ",Object(i.b)("inlineCode",{parentName:"p"},"abc"),"), or a combination of basic and special characters (e.g., ",Object(i.b)("inlineCode",{parentName:"p"},"ab\\*c")," or ",Object(i.b)("inlineCode",{parentName:"p"},"(\\d+)\\.\\d\\*"),")."),Object(i.b)("h3",{id:"regular-expression-literal"},"Regular Expression Literal"),Object(i.b)("p",null,"A regular expression literal is a RegEx pattern encosed within forward slashes:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"const re = /ab+c/;\n")),Object(i.b)("p",null,"This RegEx above matches the character ",Object(i.b)("inlineCode",{parentName:"p"},"a"),", followed by one or more instances of the character ",Object(i.b)("inlineCode",{parentName:"p"},"b"),", followed by the character ",Object(i.b)("inlineCode",{parentName:"p"},"c"),"."),Object(i.b)("h3",{id:"regexp-objects"},Object(i.b)("em",{parentName:"h3"},"RegExp")," Objects"),Object(i.b)("p",null,"We can write a regular expression string and pass it as an argument to the ",Object(i.b)("em",{parentName:"p"},"RegExp")," constructor:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"const re = new RegExp('ab+c');\n")),Object(i.b)("h2",{id:"flags"},"Flags"),Object(i.b)("p",null,"To create a ",Object(i.b)("em",{parentName:"p"},"RegExp")," object, we use this syntax:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"new RegExp(pattern[, flags])\n")),Object(i.b)("p",null,"To create a regular expression literal, we use this syntax:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"/pattern/flags\n")),Object(i.b)("p",null,"If specified, flags can have any combination of the following values:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"g"),": global match."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"i"),": ignore case."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"m"),": multiline. Treats beginning (^) and end ($) characters as working over multiple lines."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"u"),": unicode. Treat pattern as a sequence of unicode code points."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"y"),": sticky. Matches only from the index indicated by the lastIndex property of this regular expression in the target string.")),Object(i.b)("h2",{id:"special-characters-in-regular-expressions"},"Special Characters in Regular Expressions"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"Character Classes")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"Character Sets")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"Alteration")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"Boundaries")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"Grouping and back references")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"Quantifiers")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"Assertions"))),Object(i.b)("h2",{id:"character-classes"},"Character Classes"),Object(i.b)("p",null,"This is not a class in the traditional sense, but rather a term that refers to a set of one or more characters that can be used to match a single character from some input string. Here are the basic forms:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Enclosed within square brackets. Specify the what you'd like your expression to match within square brackets; for example, ","[a-f]"," will match any lowercase ",Object(i.b)("inlineCode",{parentName:"li"},"a")," through ",Object(i.b)("inlineCode",{parentName:"li"},"f")," character."),Object(i.b)("li",{parentName:"ul"},"Predefined: These consist of a backslash character (",Object(i.b)("inlineCode",{parentName:"li"},"\\"),") followed by a letter. The table below shows some predefined character classes and the characters they match.")),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Character"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Matches"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},".")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The period matches any single character, except line terminators (e.g., a newline).")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"\\d")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A single digit character (i.e., ",Object(i.b)("inlineCode",{parentName:"td"},"[0-9]"),").")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"\\D")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A single non-digit character (i.e., ",Object(i.b)("inlineCode",{parentName:"td"},"[^0-9]"),").")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"\\w")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A single alphanumeric word character, including the underscore (i.e., ",Object(i.b)("inlineCode",{parentName:"td"},"[A-Za-z0-9_]"),").")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"\\W")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A single non-word character (i.e., ",Object(i.b)("inlineCode",{parentName:"td"},"[^A-Za-z0-9_]"),").")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"\\s")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A single whitespace character. This includes space (`",Object(i.b)("inlineCode",{parentName:"td"},"), tab ("),"\\t`), form feed, line feed, and other Unicode spaces.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"\\S")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A single non-whitespace character (i.e., ",Object(i.b)("inlineCode",{parentName:"td"},"[^\\w]"),").")))),Object(i.b)("h2",{id:"character-sets"},"Character Sets"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The character set ",Object(i.b)("inlineCode",{parentName:"li"},"[abcd]")," will match any one character from the set ",Object(i.b)("em",{parentName:"li"},"{",Object(i.b)("inlineCode",{parentName:"em"},"a"),", ",Object(i.b)("inlineCode",{parentName:"em"},"b"),", ",Object(i.b)("inlineCode",{parentName:"em"},"c"),", ",Object(i.b)("inlineCode",{parentName:"em"},"d"),"}"),". This is equivalent to ",Object(i.b)("inlineCode",{parentName:"li"},"[a-d]"),"."),Object(i.b)("li",{parentName:"ul"},"The character set ",Object(i.b)("inlineCode",{parentName:"li"},"[^abcd]"),": Matches anything other than the enclosed characters. This is equivalent to ",Object(i.b)("inlineCode",{parentName:"li"},"[^a-d]"),".")),Object(i.b)("h3",{id:"alteration"},"Alteration"),Object(i.b)("p",null,"We use the ",Object(i.b)("inlineCode",{parentName:"p"},"|")," symbol to match one thing or the other. For example, ",Object(i.b)("inlineCode",{parentName:"p"},"a|b")," matches either ",Object(i.b)("inlineCode",{parentName:"p"},"a")," or ",Object(i.b)("inlineCode",{parentName:"p"},"b"),"."),Object(i.b)("h3",{id:"boundaries"},"Boundaries"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Character"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Matches"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"^")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Matches beginning of input. If the multiline flag is set to true, also matches immediately after a line break character.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"$")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Matches end of input. If the multiline flag is set to true, also matches immediately before a line break character.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"\\b")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A zero-width word boundary, such as between a letter and a space.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"\\B")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Matches a zero-width non-word boundary, such as between two letters or between two spaces.")))),Object(i.b)("h3",{id:"grouping-and-back-references"},"Grouping and back references"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"(a)"),": Matches a and remembers the match. These are called capturing groups."),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"(?:a)"),": Matches a but does not remember the match. These are called non-capturing groups."),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"\\n"),": Here n is a positive integer. A back reference to the last substring matching the n parenthetical in the regular expression."),Object(i.b)("h3",{id:"quantifiers"},"Quantifiers"),Object(i.b)("p",null,"*a**: Matches the preceding item a, 0 or more times."),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"a+"),": Matches the preceding item a, 1 or more times."),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"a?"),": Matches the preceding item a, 0 or 1 time."),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"a{n}"),": Here n is a positive integer. Matches exactly n occurrences of the preceding item a."),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"a{n, }"),": Here n is a positive integer. Matches at least n occurrences of the preceding item a."),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"a{n, m}"),": Here n and m are positive integers. Matches at least n and at most m occurrences of the preceding item a."),Object(i.b)("h3",{id:"assertions"},"Assertions"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"a(?=b)"),": Matches a only if a is followed by b."),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"a(?!b)"),": Matches a only if a is not followed by b."),Object(i.b)("h3",{id:"working-with-regular-expressions"},"Working with Regular Expressions"),Object(i.b)("p",null,"Regular expressions are used with the RegExp methods:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"test")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"exec"))),Object(i.b)("p",null,"and with the String methods:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"match")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"search")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"split")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"replace"))),Object(i.b)("h3",{id:"the-test-method"},"The ",Object(i.b)("inlineCode",{parentName:"h3"},"test")," Method"),Object(i.b)("p",null,"The test() method executes a search for a match between a regular expression and a specified string. Returns true or false."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"var re = /^learn/;\nvar str1 = 'learn regular expressions';\nvar str2 = 'write regular expressions';\n\nconsole.log(re.test(str1));\nconsole.log(re.test(str2));\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\ntrue\nfalse\n")),Object(i.b)("h3",{id:"the-exec-method"},"The ",Object(i.b)("inlineCode",{parentName:"h3"},"exec")," Method"),Object(i.b)("p",null,"The exec() method executes a search for a match in a specified string. Returns a result array or null."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Match 'quick brown' followed by 'jumps', ignoring characters in between\n// Remember 'brown' and 'jumps'\n// Ignore case\n\nvar re = /quick\\s(brown).+?(jumps)/ig;\nvar str = 'The Quick Brown Fox Jumps Over The Lazy Dog.';\nvar res = re.exec(str);\n\nconsole.log(res);\nconsole.log();\n\n// The result object contains following information:\n// 1. [0] is the full string of characters matched\n// 2. [1], ...[n] is the parenthesized substring matches, if any. The number of possible parenthesized substrings is unlimited.\n// 3. index is the 0-based index of the match in the string.\n// 4. input is the original string.\n\nconsole.log('string of characters matched = ' + res[0]);\nconsole.log('first parenthesized substring match = ' + res[1]);\nconsole.log('second parenthesized substring match = ' + res[2]);\nconsole.log('index of the match = ' + res.index);\nconsole.log('original string = ' + res.input);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n[ 'Quick Brown Fox Jumps',\n  'Brown',\n  'Jumps',\n  index: 4,\n  input: 'The Quick Brown Fox Jumps Over The Lazy Dog.',\n  groups: undefined ]\n\nstring of characters matched = Quick Brown Fox Jumps\nfirst parenthesized substring match = Brown\nsecond parenthesized substring match = Jumps\nindex of the match = 4\noriginal string = The Quick Brown Fox Jumps Over The Lazy Dog.\n")),Object(i.b)("h2",{id:"match"},"Match"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("p",null,"The match() method retrieves the matches when matching a string against a regular expression."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"Find 'Chapter', followed by `$1$` or more numeric characters, followed by a decimal point, followed by a zero or more numeric characters, and use a flag to specify that the results are *case-insensitive*.\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"var re = /see (chapter \\d+(\\.\\d)*)/i;\nvar str = 'For more information on regular expressions, see Chapter 3.4.5.1 and CHAPTER 2.3';\n\nconsole.log(str.match(re));\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\n[ 'see Chapter 3.4.5.1',\n  'Chapter 3.4.5.1',\n  '.1',\n  index: 45,\n  input: 'For more information on regular expressions, see Chapter 3.4.5.1 and CHAPTER 2.3',\n  groups: undefined ]\n")),Object(i.b)("h2",{id:"search"},"Search"),Object(i.b)("p",null,"The search() method executes a search for a match between a regular expression and this String object. If successful, search() returns the index of the first match of the regular expression inside the string. Otherwise, it returns -1."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example"),"\nCheck whether or not a string contains the word 'learn'."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"const re = /learn/;\nconst str1 = 'Today, we\\'ll learn about regular expressions.';\nconst str2 = 'Tomorrow, we\\'ll write regular expressions '\n            + 'and learn some complex expressions.';\nconst str3 = 'We\\'re all done now!';\n\nconsole.log(str1);\nconsole.log('A search for', re, 'returns', str1.search(re), '\\n');\nconsole.log(str2);\nconsole.log('A search for', re, 'returns', str2.search(re), '\\n');\nconsole.log(str3);\nconsole.log('A search for', re, 'returns', str3.search(re));\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"// Output\nToday, we'll learn about regular expressions.\nA search for /learn/ returns 13 \n\nTomorrow, we'll write regular expressions and learn some complex expressions.\nA search for /learn/ returns 46 \n\nWe're all done now!\nA search for /learn/ returns -1\n")),Object(i.b)("h2",{id:"split"},"Split"),Object(i.b)("p",null,"The split() method splits a String object into an array of strings by separating the string into substrings. Separator specifies the character(s) to use for separating the string. The separator is treated as a string or a regular expression. If separator is omitted, the array returned contains one element consisting of the entire string. If separator is an empty string, str is converted to an array of characters."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example"),"\nSplit a name string at the space separating the first and last names."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"const name = 'Julia Roberts';\nconst res = name.split(' ');\n\nconsole.log('The split array:', res);\nconsole.log('First Name:', res[0]);\nconsole.log('Last Name:', res[1]);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nThe split array: [ 'Julia', 'Roberts' ]\nFirst Name: Julia\nLast Name: Roberts\n")),Object(i.b)("h3",{id:"replace"},"Replace"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"replace(pattern, replacement)")," method returns a new string where some (or all) occurrences of a matched $pattern$ have been replaced with a $replacement$ substring."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"$pattern$ : This value can be a string or a ",Object(i.b)("em",{parentName:"li"},"RegExp")," object to match against the calling string."),Object(i.b)("li",{parentName:"ul"},"$replacement$ : This value can be a substring to replace the match with, or it can be a function to invoke that generates the replacement substring.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example"),"\nIn this example, we replace any occurrence of the substring 'RegExp' with 'Regular Expression'"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"const re = /RegExp/;\nconst myString = 'We\\'re learning about RegExps.';\nconst replacementString = 'Regular Expression';\n\nconsole.log(myString);\nconsole.log(myString.replace(re, replacementString));\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"// Output\nWe're learning about RegExps.\nWe're learning about Regular Expressions.\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example"),"\nFind a ",Object(i.b)("em",{parentName:"p"},"substring")," of length greater than $1$ that starts ",Object(i.b)("em",{parentName:"p"},"and")," ends with same character."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"const re = /(.).*\\1/;\n\nconst str1 = 'wxyz';\nconst str2 = 'wxyzw';\nconst str3 = 'wxyzx';\nconst str4 = 'wxywz';\n\nconsole.log('substring:', str1.match(re));\nconsole.log('substring:', str2.match(re)[0]);\nconsole.log('substring:', str3.match(re)[0]);\nconsole.log('substring:', str4.match(re)[0]);\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// Output\nsubstring: null\nsubstring: wxyzw\nsubstring: xyzx\nsubstring: wxyw\n")),Object(i.b)("p",null,"Let's break down the regular expression ",Object(i.b)("inlineCode",{parentName:"p"},"(.).*\\1"),":"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("inlineCode",{parentName:"li"},"(.)")," captures ",Object(i.b)("em",{parentName:"li"},"any character"),"."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("inlineCode",{parentName:"li"},".*")," stipulates that the captured character must followed by zero or more occurrences of any character."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("inlineCode",{parentName:"li"},"\\1")," is a backreference to the first ",Object(i.b)("em",{parentName:"li"},"capture group")," in our expression (i.e., ",Object(i.b)("inlineCode",{parentName:"li"},"(.)"),"). It stipulates that the character following whatever we matched in step $2$ must match whatever was ",Object(i.b)("em",{parentName:"li"},"captured")," inside the parentheses in step $1$.")))}b.isMDXComponent=!0},133:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return d}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=r.a.createContext({}),b=function(e){var t=r.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},p=function(e){var t=b(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=b(a),m=n,d=p["".concat(l,".").concat(m)]||p[m]||u[m]||i;return a?r.a.createElement(d,c(c({ref:t},s),{},{components:a})):r.a.createElement(d,c({ref:t},s))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=m;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:n,l[1]=c;for(var s=2;s<i;s++)l[s]=a[s];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);